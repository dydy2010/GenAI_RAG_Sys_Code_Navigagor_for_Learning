{"name": "2_3_advanced_example_MultipleInputOutput", "extension": ".R", "course": "RB", "st_mode": 33204, "st_ino": 13091696, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 3432, "st_atime": 1759510075.4659176, "st_mtime": 1759492208.0, "st_ctime": 1759510073.5346377, "st_birthtime": 1759492208.0, "st_blocks": 8, "st_blksize": 4096, "content": "## We show a more complex example. Just run the whole script and try to identify\n## the single UI elements, investigate what the app is doing and how it works.\n\n## Load packages\nlibrary(shiny)\nlibrary(ggplot2)\n\n\nui <- fluidPage(\n  \n  titlePanel(title = \"Panel on the sidebar\"),\n  \n  # Sidebar layout with input and output definitions ---------------------\n  \n  ## This causes the application to have a sidebar panel on the very left, and a\n  ## main panel.\n  sidebarLayout(\n    \n    ## Sidebar panel for inputs ------------------------------------------\n    sidebarPanel(\n      \n      ## Input: what variable to focus on the x-axis\n      selectInput(inputId = \"user.variable1\", \n                  label = \"Choose 1st variable:\",\n                  choices = colnames(iris)),\n      \n      ## Input: what variable to focus on the y-axis\n      selectInput(inputId = \"user.variable2\", \n                  label = \"Choose 2nd variable:\",\n                  choices = colnames(iris),\n                  selected = \"Sepal.Width\"),\n      \n      \n      ## add vertical empty space\n      br(),\n      br(),\n      \n      ## Input: how many values shall be shown\n      numericInput(inputId = \"user.number\", \"Number of observations to consider:\", \n                   min = 10, \n                   max = 150,\n                   value = 30),\n      \n      \n      ## Example of an action button\n      actionButton(inputId = \"user.start\", \n                   label = \"Update number of observations\")\n      \n    ),\n    \n    \n    \n    ## Main panel  -------------------------------------------------------\n    mainPanel(\n      \n      ## Output: Header + summary of distribution ------------------------\n      h3(\"Summary\"),\n      verbatimTextOutput(outputId = \"summary.output\"),\n      \n      \n      h3(\"Plot\"),\n      plotOutput(outputId = \"plot.output\"),\n      \n      \n      # Output: Header + table of distribution ----------------------------\n      h3(\"Observations\"),\n      tableOutput(outputId = \"table.output\")\n\n    )\n    \n  )\n)\n\n\n# Server ------------------------------------------------------------------\n\n\nserver <- function(input, output, session) {\n  \n  ## The number of rows gets only updated after clicking on the button since we\n  ## use eventReactive(). I.e. even if \"input$user.start\" is included, the\n  ## reactive expression only depends on the reactive elements defined in\n  ## \"eventExpr.\"\n  dataset <- eventReactive(\n    eventExpr = c(input$user.start),\n    valueExpr = {\n      \n      ## shuffle rows\n      set.seed(123)\n      random.order <- sample(x = nrow(iris),\n                             replace = FALSE,\n                             size = nrow(iris))\n      df <- iris[random.order, ]\n      \n      ## subselect rows of dataset\n      df <- df[1:input$user.number, ]\n\n      return(df)\n    })\n  \n\n  \n  ## Show summary\n  output$summary.output <- renderPrint({\n    ## print summary\n    summary(dataset())\n  })\n  \n  \n  output$table.output <- renderTable({\n    ## output dataset in the form of a table\n    dataset()\n  })\n  \n  output$plot.output <- renderPlot({\n    \n    ## A simple base plot with the selected variables\n    plot(x = dataset()[, input$user.variable1], \n         y = dataset()[, input$user.variable2],\n         pch = 20,\n         xlab = input$user.variable1,\n         ylab = input$user.variable2)\n    \n  })\n  \n  \n  \n}\n\n\n\n# Run Shiny App ------------------------------------------------------------\n\nshinyApp(ui, server)\n\n"}