{"name": "GLMs_Lab_py", "extension": ".R", "course": "MPM01", "st_mode": 33204, "st_ino": 13100133, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 11691, "st_atime": 1759510059.5076, "st_mtime": 1759494000.0, "st_ctime": 1759510056.3140805, "st_birthtime": 1759494000.0, "st_blocks": 24, "st_blksize": 4096, "content": "## Extending the Linear Model 6: Generalised Linear Models Lab\n## Load packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport seaborn as sns\nimport statsmodels.formula.api as smf\nfrom statsmodels.formula.api import ols, glm\nfrom statsmodels.discrete.discrete_model import Poisson, Logit\nfrom statsmodels.genmod.generalized_linear_model import GLM\nfrom statsmodels.genmod.families import Binomial, Poisson as PoissonFamily#, QuasiPoisson\nfrom statsmodels.gam.api import GLMGam, BSplines\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import confusion_matrix\nfrom scipy.special import expit \nfrom sklearn.datasets import load_iris\nfrom pygam import LogisticGAM, s\n\n## Set seed for reproducibility\nnp.random.seed(1)\n\n## Simulate data for smokers\nno_days = 14\nv_non_smoker = np.concatenate([np.random.poisson(lam = 0, size = no_days - 1), [1]])\nv_smoker1_2 = np.random.poisson(lam = 5, size = no_days)\nv_smoker_box = np.random.poisson(lam = 20, size = no_days)\n\nd_smokers = pd.DataFrame({\n    'no_cigarettes': np.concatenate([v_non_smoker, v_smoker1_2, v_smoker_box]),\n    'person': np.repeat(['non-smoker', 'moderate smoker', 'heavy smoker'], no_days)\n})\nd_smokers.head()\n\n## Clean figure object\nplt.clf()\n## Plotting with seaborn\nsns.boxplot(data = d_smokers, x = 'person', y = 'no_cigarettes')\nplt.axhline(0, color = 'gray', linestyle = '--')\nplt.title('Number of Cigarettes per Person')\n\n## This line of code is necessary only if you run line-by-line\nplt.show()\n\n## Modelling count data with a linear model\nlm_smokers = ols('no_cigarettes ~ person', data = d_smokers).fit()\nprint(\"Linear Model Coefficients:\")\nprint(np.round(lm_smokers.params, 1))\n\n## Simulate observations from the linear model\nnp.random.seed(3)\nsim_data_smokers = lm_smokers.predict(d_smokers) + np.random.normal(0,\n                                                                    lm_smokers.resid.std(),\n                                                                    size = len(d_smokers))\n\nsim_data_smokers.head()\nsim_data_smokers.tail()\n\n## Plot simulated data\nplt.clf()\nsns.boxplot(x = d_smokers['person'], y = sim_data_smokers)\nplt.axhline(0, color = 'gray', linestyle = '--')\nplt.title('Simulated Number of Cigarettes (Assuming Normality)')\n\nplt.show()\n\n## Poisson GLM\nglm_smokers = smf.glm('no_cigarettes ~ person', \n                  data = d_smokers, \n                  family = PoissonFamily()).fit()\nprint(\"Poisson GLM Summary:\")\nprint(glm_smokers.summary())\n\n## Simulate Poisson data from GLM\nnp.random.seed(2)\nsim_data_smokers_poisson = np.random.poisson(lam = glm_smokers.predict(d_smokers))\n\nsim_data_smokers_poisson_df = pd.DataFrame({'simulated_y': sim_data_smokers_poisson})\nsim_data_smokers_poisson_df.head()\nsim_data_smokers_poisson_df.tail()\n\n## Plot simulated Poisson data\nplt.clf()\nsns.boxplot(x = d_smokers['person'], y = sim_data_smokers_poisson_df['simulated_y'])\nplt.axhline(0, color = 'gray', linestyle = '--')\nplt.title('Simulated Number of Cigarettes (Assuming Poisson Distribution)')\n\nplt.show()\n\n## Reproduce bliss data set\nbliss = pd.DataFrame({\n    \"dead\": [2, 8, 15, 23, 27],\n    \"alive\": [28, 22, 15, 7, 3],  \n    \"conc\": [0, 1, 2, 3, 4]\n})\n\nbliss[\"total_insects\"] = bliss[\"dead\"] + bliss[\"alive\"]\nbliss[\"mortality_rate\"] = bliss[\"dead\"] / bliss[\"total_insects\"]\n\nprint(bliss)\n\n## Plot simulated Poisson data\nplt.clf()\nsns.scatterplot(x = bliss['conc'], y = bliss['mortality_rate'])\n\nplt.show()\n\nplt.clf()\nsns.scatterplot(x = 'conc', y = 'mortality_rate', data = bliss)\nsns.lmplot(x = 'conc', y = 'mortality_rate', data = bliss, ci = None)\n\nplt.show()\n\nplt.clf()\n# Generate x values from -5 to 5\nx = np.linspace(-5, 5, 300)\n\n# Compute the inverse logit function (logistic sigmoid)\ny = expit(x)\n\n# Plot the curve\nplt.plot(x, y, label = r'$\\sigma(x) = \\frac{1}{1 + e^{-x}}$', color = 'blue')\n\n# Add horizontal reference lines at y = 0 and y = 1\nplt.axhline(y = 0, color = 'gray', linestyle = '--')\nplt.axhline(y = 1, color = 'gray', linestyle = '--')\n\n# Labels and title\nplt.xlabel(\"x\")\nplt.ylabel(\"ilogit(x)\")\nplt.title(\"Inverse Logit Function\")\nplt.legend()\n\n# Show the plot\nplt.show()\n\nglm_insects = smf.glm(\"mortality_rate ~ conc\", \n                data = bliss, \n                family = sm.families.Binomial()).fit()\nprint(glm_insects.summary())\n\nplt.clf()\n# Generate new data for prediction\nnew_data = pd.DataFrame({\"conc\": np.linspace(0, 5, 100)})\nnew_data[\"pred_insects\"] = glm_insects.predict(new_data)\n\n# Plot\nplt.figure(figsize = (8, 6))\nplt.grid()\n\n# Plot predictions\nsns.scatterplot(x = new_data[\"conc\"], y = new_data[\"pred_insects\"], \n               color = \"blue\", s = 50, label = \"Predictions\")\n\n\n# Plot actural observations on top\nsns.scatterplot(x = bliss[\"conc\"], y = bliss[\"mortality_rate\"],\n              color = \"red\", s = 100, label = \"Actual observations\")\n\n\n# Horizontal reference lines\nplt.axhline(0, color = \"gray\", linestyle = \"--\")\nplt.axhline(1, color = \"gray\", linestyle = \"--\")\n\n# Labels and limits\nplt.ylim(0, 1)\nplt.xlabel(\"Concentration\")\nplt.ylabel(\"Mortality Rate\")\nplt.title(\"Logistic Regression Predictions\")\n\nplt.legend()\nplt.show()\n\nglm_insects_binary = smf.glm(\"survived_surgery ~ age + sex\", \n                             data = someSurgeryData, \n                             family = sm.families.Binomial()).fit()\nprint(glm_insects_binary.summary())\n\n## Load iris dataset\niris = load_iris()\ndf_iris = pd.DataFrame(iris.data, columns = iris.feature_names)\ndf_iris[\"Species\"] = iris.target  # Convert species to numerical labels\n\n## Selecting the predictors and response variable\nX = df_iris[[\"sepal length (cm)\", \"petal width (cm)\"]]  # Equivalent to Sepal.Length and Petal.Width\ny = df_iris[\"Species\"]  # Target variable (0, 1, 2 for species)\n\n## Fit multinomial logistic regression\nmultinom_iris = LogisticRegression(solver = \"lbfgs\", max_iter = 500)\nmultinom_iris.fit(X, y)\n\n## Display model coefficients\nprint(\"Coefficients:\\n\", multinom_iris.coef_)\nprint(\"Intercept:\\n\", multinom_iris.intercept_)\n\n## Read space- or tab-delimited file correctly\nd_stab = pd.read_table(\"../../Datasets/stability.dat\", sep='\\\\s+', header = 0)\n\n# Display structure equivalent to str(d.stab)\nprint(d_stab.info())\nprint(d_stab.head())\n\nplt.clf()\nsns.scatterplot(y = 'perform', x = 'stability', data = d_stab)\n\nplt.show()\n\n## Fit logistic regression (equivalent to method = \"glm\", family = \"binomial\" in ggplot)\nglm_stab = smf.glm(\"perform ~ stability\", data = d_stab, \n                   family = sm.families.Binomial()).fit()\n\nprint(glm_stab.summary())\n\n# Generate predictions\nstability_range = np.linspace(d_stab[\"stability\"].min(), d_stab[\"stability\"].max(), 100)\npred_data = pd.DataFrame({\"stability\": stability_range})\npred_data[\"perform_pred\"] = glm_stab.predict(pred_data)\n\n# Plot\nplt.figure(figsize = (8, 6))\n\n# Scatter plot (equivalent to geom_point())\nsns.scatterplot(data = d_stab, x = \"stability\", y = \"perform\",\n                color = \"blue\", label = \"Observed\")\n\n# Logistic regression curve (equivalent to geom_smooth(method = \"glm\", family = \"binomial\"))\nplt.plot(pred_data[\"stability\"], pred_data[\"perform_pred\"], \n        color = \"red\", label = \"Logistic Fit\")\n\n# Labels and title\nplt.xlabel(\"Stability\")\nplt.ylabel(\"Perform\")\nplt.title(\"Logistic Regression Fit\")\n\nplt.legend()\n\nplt.show()\n\nfitted_stab = glm_stab.fittedvalues\n##\nbinary_predictions = (fitted_stab >= 0.5).astype(int)\nprint(binary_predictions)\n##\nd_obs_fit_stab = pd.DataFrame({'obs': d_stab['perform'], 'fit': binary_predictions})\nprint(d_obs_fit_stab.head())\n##\n## Frequency count of a single categorical column\nprint(d_obs_fit_stab[\"obs\"].value_counts())\n\ncontingency_table = pd.crosstab(d_obs_fit_stab[\"obs\"], d_obs_fit_stab[\"fit\"])\n\n## Display the contingency table\nprint(contingency_table)\n\nprop_table = contingency_table.div(contingency_table.sum().sum())\nprint(round(prop_table, 2))\n\n## Load datasets (adjust the path if necessary)\nesdcomp = pd.read_csv(\"../../Datasets/esdcomp.csv\")\n\n## Fit Poisson GLM\nglm_complaints = smf.glm(\"complaints ~ visits + residency + gender + revenue + hours\",\n                      data = esdcomp, \n                      family = sm.families.Poisson()).fit()\nprint(glm_complaints.summary())\n\n## Extract coefficient for sexM\ncoef_genderM = glm_complaints.params[\"gender[T.M]\"]\nprint(\"Coefficient for gender M:\", coef_genderM)\n\n## Exponentiated coefficient\nexp_coef_genderM = np.exp(coef_genderM).round(2)\nprint(\"Exponentiated coefficient for sexM:\", exp_coef_genderM)\n\n## First doctor data\nfirst_doctor = esdcomp[0:1]\nprint(\"First doctor:\", first_doctor)\n\n## Fitted value for first doctor\nfitted_first_doctor = glm_complaints.fittedvalues[0:1]\nprint(\"Fitted complaints for first doctor:\", fitted_first_doctor)\n\n## Compute predicted complaints if the first doctor was male\nfirst_doctor_as_male = first_doctor\nfirst_doctor_as_male.iloc[0, 3] = \"M\"\nprint(first_doctor_as_male)\npred_first_doc_male = glm_complaints.predict(first_doctor_as_male)\nprint(\"Predicted complaints if first doctor was male:\", pred_first_doc_male)\n\n## Manually computing expected complaints for first doctor as male\nmanual_pred = fitted_first_doctor * np.exp(coef_genderM)\nprint(\"Manually computed complaints for first doctor as male:\", manual_pred)\n\n## Exponentiate coefficient for visits\nexp_coef_visits = np.exp(glm_complaints.params[\"visits\"])\nprint(\"Exponentiated coefficient for visits:\", exp_coef_visits.round(5))\n\n## Range of visits\nvisits_range = (esdcomp[\"visits\"].min(), esdcomp[\"visits\"].max())\nprint(\"Range of visits:\", visits_range)\n\n## Increase number of visits by 50\ncoef_visits_50_add = glm_complaints.params[\"visits\"] * 50\nprint(coef_visits_50_add.round(5))\n\n## Exponentiate it\nexp_coef_visits_50_add = np.exp(coef_visits_50_add)\nprint(\"Exponentiated coefficient for visits * 50:\", exp_coef_visits_50_add.round(5))\n\nplt.clf()\n# Generate new data for prediction\nnew_data = pd.DataFrame({\"conc\": np.linspace(0, 5, 100)})\nnew_data[\"pred_insects\"] = glm_insects.predict(new_data)\n\n# Plot\nplt.figure(figsize = (8, 6))\nplt.grid()\n\n# Plot predictions\nsns.scatterplot(x = new_data[\"conc\"], y = new_data[\"pred_insects\"], \n               color = \"blue\", s = 50, label = \"Predictions\")\n\n\n# Plot actural observations on top\nsns.scatterplot(x = bliss[\"conc\"], y = bliss[\"mortality_rate\"],\n              color = \"red\", s = 100, label = \"Actual observations\")\n\n\n# Horizontal reference lines\nplt.axhline(0, color = \"gray\", linestyle = \"--\")\nplt.axhline(1, color = \"gray\", linestyle = \"--\")\n\n# Labels and limits\nplt.ylim(0, 1)\nplt.xlabel(\"Concentration\")\nplt.ylabel(\"Mortality Rate\")\nplt.title(\"Logistic Regression Predictions\")\n\nplt.legend()\n\nplt.show()\n\nprint(glm_insects.params)\n##\nprint(np.exp(glm_insects.params['conc']).round(5))\n\nplt.vlines(x = 2, ymin = 0, ymax = 0.5, color = 'red', linewidth = 0.8)\nplt.hlines(y = 0.5, xmin = 0, xmax = 2, color = 'red', linewidth = 0.8)\n##\nplt.vlines(x = 3, ymin = 0, ymax = 0.77, color = 'red', linewidth = 0.8)\nplt.hlines(y = 0.77, xmin = 0, xmax = 3, color = 'red', linewidth = 0.8)\n\nplt.show()\n\nbins = [-np.inf, 0, 2, 4]\nlabels = [\"no insecticide\", \"low conc\", \"high conc\"]\n\n# Apply binning (equivalent to cut() in R)\nbliss[\"conc_asFactor\"] = pd.cut(bliss[\"conc\"], bins=bins, labels=labels)\n\n# Display factor levels (unique categories)\nprint(bliss[\"conc_asFactor\"].cat.categories)\n\npd.crosstab(bliss[\"conc\"], bliss[\"conc_asFactor\"])\n\nglm_insects_fac = smf.glm(\"mortality_rate ~ conc_asFactor\", \n                data = bliss, \n                family = sm.families.Binomial()).fit()\nprint(glm_insects_fac.summary())\n\n## smf.glm doesn't directly support quasi poisson models\n"}