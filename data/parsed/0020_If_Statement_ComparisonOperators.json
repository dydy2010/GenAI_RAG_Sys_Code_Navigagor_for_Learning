{"name": "0020_If_Statement_ComparisonOperators", "extension": ".ipynb", "course": "PDS", "st_mode": 33204, "st_ino": 13100461, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 11479, "st_atime": 1759497181.2842891, "st_mtime": 1759494036.0, "st_ctime": 1759510073.4463625, "st_birthtime": 1759494036.0, "st_blocks": 24, "st_blksize": 4096, "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"# Intro 'Conditional Statement'  \\n\",\n    \"\\n\",\n    \"\\n\",\n    \"Below are some code examples taken from https://www.python-course.eu/python3_conditional_statements.php - revised and rearranged: `mae`\\n\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"## Conditional Statements\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"**Goal:** \\n\",\n    \"\\n\",\n    \"We would like to give children a recommendation, depending on their age, whether they should watch a film or not.\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"### Simplest if statement\\n\",\n    \"\\n\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"# try to find out: \\n\",\n    \"# what is the ouput of this little progam, if you enter '11' and then '14'\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"age = int(input(\\\"Your age? \\\"))  \\n\",\n    \"# input:  11     (first run!)\\n\",\n    \"# input:  14     (second run!)\\n\",\n    \"\\n\",\n    \"if age < 12:\\n\",\n    \"    print(\\\"Sorry, the film is only from 12!\\\")\\n\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {\n    \"scrolled\": true\n   }\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"In the cell below, make a small note of what we learned (using `markdown` notation) !)\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"###  'if' statement with 'else'-branch\"\n   ],\n   \"metadata\": {\n    \"scrolled\": true\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"# now we always want to generate an output \\n\",\n    \"# no matter whether a child is  < 12 or not   => we use `else`:\\n\",\n    \"\\n\",\n    \"# As in the last example: Enter 11 first and then 14 to test.\\n\",\n    \"\\n\",\n    \"age = int(input(\\\"Your age? \\\"))\\n\",\n    \"# input:  11     (first run!)\\n\",\n    \"# input:  14     (second run!)\\n\",\n    \"\\n\",\n    \"if age < 12:\\n\",\n    \"    print(\\\"Sorry, the film is only from 12!\\\")\\n\",\n    \"else:\\n\",\n    \"    print(\\\"Okay, have fun!\\\")\\n\",\n    \"    \"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"### 'else'-branch vs 'elif'-branch\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"If we want to give the children more precise recommendations, we have to \\\"nest\\\" several if statements.\\n\",\n    \"\\n\",\n    \"The recommendations should look like this:\\n\",\n    \"- If age <4: Film is too complicated for you!\\n\",\n    \"- If age <12: Okay, have fun!\\n\",\n    \"- If age <16: Are you sure? Is this the right film for you?\\n\",\n    \"- If age> = 16: Forget the movie! Kid stuf!\\n\",\n    \"\\n\",\n    \"As in practice, often the recommendation will not be 100% clear.\\\\\\n\",\n    \"Decide for yourself (in a second step) what exactly should apply (e.g. on the borders).\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"**Example 1:** With `nested if` - Statements \"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"# inputs:  3, 11, 14, 17 \\n\",\n    \"age = int(input(\\\"Your age? \\\"))\\n\",\n    \"\\n\",\n    \"if age < 4:\\n\",\n    \"    print(\\\"Film is too complicated for you!\\\")\\n\",\n    \"else:\\n\",\n    \"    if age < 12:\\n\",\n    \"        print(\\\"Okay, have fun!\\\")\\n\",\n    \"    else:\\n\",\n    \"        if age < 16:\\n\",\n    \"            print(\\\"Are you sure? Is this the right film for you?\\\")\\n\",\n    \"        else:\\n\",\n    \"            print(\\\"Forget the movie! Kid stuf!\\\")\\n\",\n    \"\\n\",\n    \"print(\\\"Movie recommendation ended!\\\")            \\n\",\n    \"            \\n\",\n    \"# test yourself the borders 4, 12, 16 ... is everything ok for you?           \"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"The `elif` statement is often used in practice instead of `nested if` commands.\\n\",\n    \"\\n\",\n    \"You can see the same example below as above with `elif` commands.\\n\",\n    \"What do you think?\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"**Example 2:**  With `elif` statements\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"# inputs:  3, 11, 14, 17\\n\",\n    \"age = int(input(\\\"Your age? \\\"))\\n\",\n    \"\\n\",\n    \"if age < 4:\\n\",\n    \"    print(\\\"Film is too complicated for you!\\\")\\n\",\n    \"elif age < 12:\\n\",\n    \"    print(\\\"Okay, have fun!\\\")\\n\",\n    \"elif age < 16:\\n\",\n    \"    print(\\\"Are you sure? Is this the right film for you?\\\")\\n\",\n    \"else:\\n\",\n    \"    print(\\\"Forget the movie! Kid stuf!\\\")\\n\",\n    \"    \\n\",\n    \"print(\\\"Movie recommendation ended!\\\")      \\n\",\n    \"\\n\",\n    \"# test yourself the borders 4, 12, 16 ... is everything ok for you?    \"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"### Comparison operators, conditions, True or False\\n\",\n    \"\\n\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"Have a look at https://docs.python.org/3/library/stdtypes.html#index-3  : <br>\\n\",\n    \"<br>\\n\",\n    \"\\n\",\n    \"The simple rule: **Anything that is not False, is True!** <br>\\n\",\n    \"\\n\",\n    \"So we only need to define what is \u201cwrong\u201d, i.e. what is false: <br>\\n\",\n    \"<br>\\n\",\n    \"\\n\",\n    \"Here are most of the built-in objects considered false:<br>\\n\",\n    \"\u25a0 constants defined to be false: None and False.<br>\\n\",\n    \"\u25a0 zero of any numeric type: 0, 0.0, 0j, Decimal(0), Fraction(0, 1)<br>\\n\",\n    \"\u25a0 empty sequences and collections: '', (), [], {}, set(), range(0)<br>\\n\",\n    \"\\n\",\n    \"<br>\\n\",\n    \"<b>Python regards all other values as \\\"true\\\", i.e. true.</b><br>\\n\",\n    \"<br>\\n\",\n    \"The following two examples explains that facts .... try it out! \"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"# inputs: 22, 0\\n\",\n    \"\\n\",\n    \"x = int(input(\\\"Input a Number: \\\"))\\n\",\n    \"if x:                             # reason: Anything that is not false is True!!!!\\n\",\n    \"    print(\\\"The number entered is not zero.\\\")\\n\",\n    \"else:\\n\",\n    \"    print(\\\"The number entered is zero.\\\")\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"# Addition: \\\"Normal\\\" (in other programming languages) is programmed as follows:\\n\",\n    \"# inputs: 22, 0 \\n\",\n    \"\\n\",\n    \"x = int(input(\\\"Input a Number: \\\"))\\n\",\n    \"if x == 0 :                           # check yourself if x is 0! \\n\",\n    \"    print(\\\"The number entered is zero.\\\")\\n\",\n    \"else:\\n\",\n    \"    print(\\\"The number entered is not zero.\\\")\\n\",\n    \"    \\n\",\n    \"\\n\",\n    \"# print(\\\"*\\\"* 20)     # as repetition\\n\",\n    \"    \\n\",\n    \"# a = 42             # this is a right-to-left assignment\\n\",\n    \"# print(a == 42  )   # this is a logical comparison: if a equals 42\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"Which of these two examples is better?\\\\\\n\",\n    \"This is often a \\\"matter of taste\\\" for the developer. You just have to be able to \\\"read\\\" both spellings.\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"Here is another example that is often found in practice:\\\\\\n\",\n    \"It is examined whether **a list is empty or not.**\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"liste = []\\n\",\n    \"#liste = [1,'HSLU']                      # second trial!\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"if liste:                                # empty list = False !! => have a look above!\\n\",\n    \"    print(\\\"List contains elements!\\\")\\n\",\n    \"else:\\n\",\n    \"    print(\\\"List is empty!\\\")\\n\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"### Exercises Condition (if and elif statements)\\n\",\n    \"Based on an Exercise of Bernd Klein (Einf\u00fchrung in Python) <br>\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"If you want to compare the age of a dog with human years, the following calculation is often used: <br>\\n\",\n    \"You calculate dog years into human years by multiplying the dog's age by 7. <br> \\n\",\n    \"\\n\",\n    \"<br>\\n\",\n    \"However, the conversion looks a bit more complicated for e.g. big dogs and depends on breed (german: Rasse): \\n\",\n    \"\\n\",\n    \"- A one year old dog is roughly equivalent to a 14 year old human.\\n\",\n    \"- 2 years of a dog corresponds to 22 years of a human.\\n\",\n    \"- From then on, one dog year corresponds to 5 human years.<br>\\n\",\n    \"\\n\",\n    \"<br> \\n\",\n    \"Write a program that asks for the age of a dog and then uses the above method to calculate what age in human years  corresponds the entered value. \"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"# solution (proposal!!!)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"age = int(input(\\\"Enter the age of the dog (1,2,...): \\\"))\\n\",\n    \"print()\\n\",\n    \"if age < 0:\\n\",\n    \"    print(\\\"This cannot be true!\\\")\\n\",\n    \"elif age == 0:\\n\",\n    \"    print(\\\"This corresponds to 0 human years!\\\")\\n\",\n    \"elif age == 1:\\n\",\n    \"    print(\\\"Roughly 14 years!\\\")\\n\",\n    \"elif age == 2:\\n\",\n    \"    print(\\\"Approximately 22 years!\\\")\\n\",\n    \"else:\\n\",\n    \"    human = 22 + (age -2) * 5\\n\",\n    \"    print(\\\"Corresponds to  \\\" + str(human) + \\\" human years!\\\")\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"}