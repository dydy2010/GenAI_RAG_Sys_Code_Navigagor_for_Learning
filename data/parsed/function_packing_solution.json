{"name": "function_packing_solution", "extension": ".py", "course": "PDS", "st_mode": 33204, "st_ino": 13100597, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 2633, "st_atime": 1759510074.6784906, "st_mtime": 1759494116.0, "st_ctime": 1759510073.4373422, "st_birthtime": 1759494116.0, "st_blocks": 8, "st_blksize": 4096, "content": "'''\nExercises regarding functions and packing operators.\n\nAuthor: RCH\nDate: 25.11.2024\n'''\nimport random as rd\n\n# given is the following function\ndef rnd_number(n=1, range=range(1,100), duplications=False):\n    '''\n    random number generator. This function returns a list of n random numbers being\n    within the given range and possible duplicates if duplications is True.\n    :param n: number of random numbers to generate\n    :param range: numerical range for random numbers\n    :param duplications: flag if duplications are allowed\n    :return: list of random numbers with or without duplicates\n    '''\n    rnd_list = []\n    if(duplications and n>len(range)):\n        return \"ERROR: too many elements requested.\"\n    elif(duplications):\n        rnd_list = rd.choices(range, k=n)\n    else:\n        rnd_list = rd.sample(range, k=n)\n    return rnd_list\n\n\n# Exercise 1:\n'''\nwrite a function that returns a list of n random numbers in ascending or descending order.\nCall the given function to generate the list and return the sorted list.\n'''\ndef sort_nr_list(n=10, order=0):\n    '''\n    returns a list with n random numbers sorted according to order\n    :param n: number of elements in the list\n    :param order: order of elements: 0 descending, 1 ascending.\n    :return: list with n random numbers sorted according to order\n    '''\n    return sorted(rnd_number(n), reverse=order)\n\n# Exercise 2:\n'''\nwrite a function that accepts arbitrary number of integer elements. The functions\ncalculates and returns the average of the difference of all subsequent elements.\nAnnotate the types to all interface variables more clarity.\n'''\ndef step_avg(*n: int) -> int:\n    '''\n    calculates the average gap between all numbers\n    :param n: numbers for calculating average gap\n    :return: average gap between all numbers n\n    '''\n    sum = 0\n    if len(n) >= 2:\n        for i in range(1,len(n)):\n            sum += n[i]-n[i-1]\n        return(sum/(len(n)-1))\n\n# Exercise 3:\n'''\ncreate two lists containing 10 sub-lists of random numbers.\nEach of the two contains 10 sub-lists with n=10,11,12,13,14...19 elements.\nOne list is sorted in ascending order and the other in descending order.\n'''\nl0 = []\nl1 = []\nfor i in range(10,20):\n    l0.append(sort_nr_list(i, 0))\n    l1.append(sort_nr_list(i, 1))\n\n# Exercise 4:\n'''\ncalculate the mean of the average element distance among all ascending and descending \nsorted lists. Use the function from Exercise 2.\nAre the two absolute averages comparable?\n'''\navg0 = avg1 = 0\nfor i in range(len(l0)):\n    avg0 += step_avg(*l0[i])/len(l0)\n    avg1 += step_avg(*l1[i])/len(l1)\n\nprint(f'{avg0=}', f'{avg1=}')"}