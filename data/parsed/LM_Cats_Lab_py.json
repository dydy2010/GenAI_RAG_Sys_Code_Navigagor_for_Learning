{"name": "LM_Cats_Lab_py", "extension": ".py", "course": "MPM01", "st_mode": 33204, "st_ino": 13100107, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 17899, "st_atime": 1759510057.6969686, "st_mtime": 1759493998.0, "st_ctime": 1759510056.2292647, "st_birthtime": 1759493998.0, "st_blocks": 40, "st_blksize": 4096, "content": "## ----include=FALSE-------------------------------------------------------------\nlibrary(reticulate)\n# py_install(\"pandas\")\n# py_install(\"matplotlib\")\n# py_install(\"seaborn\")\n# py_install(\"statsmodels\")\n# py_install(\"numpy\")\n\n\n## ## Import data sets\n## import pandas as pd\n## import matplotlib.pyplot as plt\n## import seaborn as sns\n## import statsmodels.formula.api as smf\n## import numpy as np\n## import statsmodels.api as sm\n## import matplotlib.patches as mpatches\n\n## ## Load dataset\n## d_cats = pd.read_csv(\"../../Datasets/Cats.csv\")\n## \n## ## Rename col names because \".\" causes troubles\n## d_cats.rename(columns = {'Body.weight': 'Body_weight',\n##                          'Heart.weight': 'Heart_weight'},\n##               inplace = True)\n## \n## ## Inspect structure\n## print(d_cats.info())\n## print(d_cats.head())\n\n## ## Clean figure object\n## plt.clf()\n## ## Scatterplot of Heart_weight vs. Body_weight\n## plt.scatter(d_cats['Body_weight'], d_cats['Heart_weight'], alpha = 0.5)\n## plt.title(\"Heart weight against body weight\")\n## \n## ## If you want to change axes name\n## # plt.xlabel(\"Body weight\")\n## # plt.ylabel(\"Heart weight\")\n\n## ## this is necessary when running line by line, but not when printing the PDF\n## plt.show()\n\n## ## Clean figure object\n## plt.clf()\n## ## Boxplot of Heart_weight by Sex\n## sns.boxplot(x = 'Sex', y = 'Heart_weight', data = d_cats)\n## plt.title(\"Heart weight against sex\")\n## \n## ## If you want to change y label\n## # plt.ylabel(\"Heart weight\")\n\n## plt.show()\n\n## ## Clean figure object\n## plt.clf()\n## \n## ## Set colors for sex groups\n## colors = {'F': 'black', 'M': 'red'}\n## ## Scatterplot with color-coded Sex\n## plt.scatter(d_cats['Body_weight'], d_cats['Heart_weight'],\n##             c = d_cats['Sex'].map(colors), label = d_cats['Sex'], alpha = 0.8)\n## plt.title(\"Heart weight against body weight\")\n## \n## ## Set legend to display both M and F. If not, it only displays F.\n## legend_handles = [mpatches.Patch(color = 'black', label = 'M'),\n##                   mpatches.Patch(color = 'red', label = 'F')]\n## plt.legend(handles = legend_handles, title = \"Sex\", loc = 'upper left')\n## \n## ## If you want to change axes name\n## # plt.xlabel(\"Body weight\")\n## # plt.ylabel(\"Heart weight\")\n\n## plt.show()\n\n## ## Clean figure object\n## plt.clf()\n## \n## ## Scatterplot with panelling by Sex\n## g = sns.FacetGrid(d_cats, col = 'Sex', height = 5, aspect = 1)\n## g.map(sns.scatterplot, 'Body_weight', 'Heart_weight')\n## \n## ## If you want to color the points by groups\n## # g.set_titles(\"{col_name}\")\n## \n## ## If you want to change the axes name\n## # g.set_axis_labels(\"Body weight\", \"Heart weight\")\n\n## plt.show()\n\n## ## Clean figure object\n## plt.clf()\n## \n## ## Scatterplot with regression line in each panel\n## g = sns.lmplot(x = 'Body_weight', y = 'Heart_weight', hue = 'Sex',\n##                data = d_cats, col = 'Sex', ci = None, height = 5, aspect = 1)\n## \n## ##  If you want to color the points by groups\n## # g.set_titles(\"{col_name}\")\n## ## If you want to change the axes name\n## # g.set_axis_labels(\"Body weight\", \"Heart weight\")\n\n## plt.show()\n\n## ## Fit a linear model: Hwt ~ Bwt\n## lm_cats = smf.ols('Heart_weight ~ Body_weight', data = d_cats).fit()\n## print(lm_cats.summary())\n\n## ## coefficients\n## print(lm_cats.params)\n\n## ## Clean figure object\n## plt.clf()\n## \n## ## Scatter plot for the observed data\n## plt.scatter(d_cats['Body_weight'], d_cats['Heart_weight'], alpha = 0.6)\n## \n## ## Set limits for the plot\n## plt.ylim(-1, 20)\n## plt.xlim(-0.2, 4)\n## plt.grid(True)\n## \n## \n## ## Create data set for regression line\n## lo = 0\n## hi = 4\n## n = 20\n## x = [(hi - lo) / (n - 1) * i for i in range(n)]\n## x_array = np.array(x)\n## intercept, slope = lm_cats.params\n## \n## ## Plot regression line\n## plt.plot(x_array, intercept + slope * x_array,\n##          color = \"red\", linestyle = \"dashed\")\n## \n## plt.axvline(0, color = \"black\", linewidth = 0.8)\n## plt.axhline(0, color = \"black\", linewidth = 0.8)\n## \n## plt.title(\"Linear Regression: Heart weight ~ Body weight\")\n## \n## ## If you want to change axes name\n## # plt.xlabel(\"Body weight\")\n## # plt.ylabel(\"Heart weight\")\n\n## plt.show()\n\n## ## Let's zoom in and concentrate on the two regression coefficients\n## ##\n## ## Divide the plotting region into two\n## fig, axes = plt.subplots(1, 2, figsize = (12, 6))\n## \n## ## Set common title\n## fig.suptitle(\"Regression coefficients of the 'lm.cats' model\")\n## \n## ##########################\n## ### First plot: Intercept ###\n## ax1 = axes[0]\n## ax1.set_title(f\"Intercept: {intercept:.2f}\")\n## \n## \n## ##########################\n## ## 2) Add grid and regression line\n## ax1.grid(True)\n## ax1.axhline(0, color = \"black\", linewidth = 0.8)\n## ax1.axvline(0, color = \"black\", linewidth = 0.8)\n## ax1.plot(x_array, intercept + slope * x_array,\n##          color = \"red\", linestyle = \"dashed\")\n## \n## ##########################\n## ## 3) Add arrow for intercept\n## ax1.annotate(\"\", xy = (0, intercept), xytext = (0, 0),\n##              arrowprops = dict(facecolor = 'blue',\n##              edgecolor = 'blue', linewidth = 1))\n## \n## \n## ## zoom in\n## # ax1.set_xlim(-0.01, 0.2)\n## # ax1.set_ylim(-0.5, 2)\n## ax1.set_xlim(-0.05, 0.55)\n## ax1.set_ylim(-0.5, 2)\n## \n## ##########################\n## ### Second plot: Slope ###\n## ax2 = axes[1]\n## \n## ax2.set_title(f\"Slope: {slope:.2f}\")\n## \n## ## Add grid and regression line\n## ax2.grid(True)\n## ax2.axhline(0, color = \"black\", linewidth = 0.8)\n## ax2.axvline(0, color = \"black\", linewidth = 0.8)\n## ax2.plot(x_array, intercept + slope * x_array,\n##          color = \"red\", linestyle = \"dashed\")\n## \n## ## Indicate slope with segments\n## ax2.hlines(y = intercept, xmin = 0, xmax = 1, color = \"blue\", linewidth = 2)\n## ax2.vlines(x = 1, ymin = intercept,\n##            ymax = intercept + slope, color = \"blue\", linewidth = 2)\n## \n## ##########################\n## ## zoom in\n## ax2.set_xlim(-0.1, 1.1)\n## ax2.set_ylim(-0.5, 4)\n## \n## ## Plot it\n## plt.show()\n\n## lm_cats_2 = smf.ols('Heart_weight ~ Body_weight + Sex', data = d_cats).fit()\n## print(lm_cats_2.summary())\n\n## ## Clean figure object\n## plt.clf()\n## \n## ## Visualise regression lines for each sex\n## \n## ## color points based on sex\n## colors = {'F': 'black', 'M': 'red'}\n## \n## ## Plot the data\n## plt.scatter(d_cats['Body_weight'],\n##             d_cats['Heart_weight'],\n##             c = d_cats['Sex'].map(colors),\n##             alpha = 0.8)\n## \n## plt.title(\"Model 'lm_cats_2'\")\n## \n## # plt.xlabel(\"Body_weight\")\n## # plt.ylabel(\"Heart_weight\")\n## \n## ## Add regression lines for each sex\n## intercept_female = lm_cats_2.params['Intercept']\n## slope2 = lm_cats_2.params['Body_weight']\n## \n## ## Regression line for female\n## plt.plot(d_cats['Body_weight'], intercept_female + slope2 * d_cats['Body_weight'],\n##         color = \"black\", label = \"Female\")\n## \n## ## Intercept for male\n## intercept_male = intercept_female + lm_cats_2.params['Sex[T.M]']\n## ## Regression line for male\n## plt.plot(d_cats['Body_weight'],\n##          intercept_male + slope2 * d_cats['Body_weight'],\n##          color = \"red\", label = \"Male\")\n## plt.legend(loc = 'upper left')\n\n## plt.show()\n\n## print(\"Female intercept:\", intercept_female)\n## print(\"Male intercept:\", intercept_male)\n\n## ## Generate the summary of the linear model as a string\n## lm_summary = lm_cats_2.summary().as_text()\n## \n## ## Split the summary into lines and extract the desired lines\n## ## (example indices for similar output)\n## summary_lines = lm_summary.split(\"\\n\")\n## ## Adjust indices as necessary for the specific content\n## desired_lines = summary_lines[11:18]\n## \n## # Print the extracted lines\n## for line in desired_lines:\n##     print(line)\n\n## lm_cats_3 = smf.ols('Heart_weight ~ Body_weight * Sex', data = d_cats).fit()\n\n## ## Clean current figure\n## plt.clf()\n## \n## # Visualise regression with interaction\n## plt.scatter(d_cats['Body_weight'], d_cats['Heart_weight'],\n##             c = d_cats['Sex'].map(colors), alpha = 0.6)\n## \n## plt.title(\"Model 'lm_cats_3'\")\n## plt.xlim(-0.1, 4)\n## plt.ylim(-1, 21)\n## plt.grid(True)\n## plt.axhline(0, color = \"black\", linewidth = 0.8)\n## plt.axvline(0, color = \"black\", linewidth = 0.8)\n## \n## # Add regression lines\n## intercept = lm_cats_3.params['Intercept']\n## slope = lm_cats_3.params['Body_weight']\n## \n## # For females\n## plt.plot(d_cats['Body_weight'], intercept + slope * d_cats['Body_weight'],\n## color = \"black\", label = \"Female\")\n## \n## # For males\n## slope_male = slope + lm_cats_3.params['Body_weight:Sex[T.M]']\n## intercept_male = intercept + lm_cats_3.params['Sex[T.M]']\n## plt.plot(d_cats['Body_weight'],\n##          intercept_male + slope_male * d_cats['Body_weight'],\n##          color = \"red\", label = \"Male\")\n## plt.legend(loc = 'upper left')\n\n## plt.show()\n\n## ## Regression coefficients\n## coefficients_interaction = lm_cats_3.params\n## print(\"Regression Coefficients:\")\n## print(coefficients_interaction)\n## \n## ## Confidence intervals\n## confidence_intervals_interaction = lm_cats_3.conf_int()\n## print(\"\\nConfidence Intervals:\")\n## print(confidence_intervals_interaction)\n\n## ## Clean figure object\n## plt.clf()\n## \n## ## Visualise confidence intervals\n## coef_names = lm_cats_3.params.index[::-1]\n## coef_values = lm_cats_3.params[::-1]\n## conf_int_values = confidence_intervals_interaction[::-1]\n## \n## plt.errorbar(coef_values, range(len(coef_values)),\n##              xerr = [coef_values - conf_int_values[0],\n##              conf_int_values[1] - coef_values],\n##              fmt = 'o', color = 'black')\n## plt.axvline(0, linestyle = \"dashed\", color = \"red\", linewidth = 1)\n## plt.yticks(range(len(coef_values)), coef_names)\n## plt.xlabel(\"Estimated Coefficients\")\n## plt.title(\"Confidence Intervals\")\n\n## plt.show()\n\n## ## Model with no interaction\n## print(\"Model with no interaction formula:\")\n## print(lm_cats_2.model.formula)\n## \n## r_squared_no_interaction = lm_cats_2.rsquared\n## print(\"\\nR-squared (no interaction):\")\n## print(r_squared_no_interaction)\n## \n## ## Model with interaction\n## print(\"\\nModel with interaction formula:\")\n## print(lm_cats_3.model.formula)\n## \n## r_squared_interaction = lm_cats_3.rsquared\n## print(\"\\nR-squared (with interaction):\")\n## print(r_squared_interaction)\n\n## # Adjusted R-squared for the model with no interaction\n## adj_r_squared_no_interaction = lm_cats_2.rsquared_adj\n## print(\"Adjusted R-squared (no interaction):\")\n## print(adj_r_squared_no_interaction)\n## \n## # Adjusted R-squared for the model with interaction\n## adj_r_squared_interaction = lm_cats_3.rsquared_adj\n## print(\"\\nAdjusted R-squared (with interaction):\")\n## print(adj_r_squared_interaction)\n\n## ## Get fitted values for the model\n## fitted_cats = lm_cats.fittedvalues\n## \n## # Display the first few fitted values (similar to head() in R)\n## print(\"\\nFirst few fitted values:\")\n## print(fitted_cats.head())\n\n## ## Clean figure object\n## plt.clf()\n## \n## ## Plot the actual data points (Heart_weight vs. Body_weight)\n## plt.figure(figsize = (8, 6))\n## plt.scatter(d_cats['Body_weight'], d_cats['Heart_weight'],\n##             color = 'darkgray', label = \"Actual data\", alpha = 0.6)\n## \n## ## Plot the fitted values (predicted values) from the model (lm_cats)\n## plt.scatter(d_cats['Body_weight'], fitted_cats,\n##             color = 'purple', label = \"Fitted values\", zorder = 5)\n## \n## ## Add the regression line\n## plt.plot(d_cats['Body_weight'], lm_cats.fittedvalues,\n##          color = 'violet', label = \"Regression line\", zorder = 10)\n## \n## ## Add title and labels\n## plt.title(\"Model 'lm.cats'\")\n## # plt.xlabel(\"Body weight\")\n## # plt.ylabel(\"Heart weight\")\n## \n## ## Show legend\n## plt.legend()\n\n## ## Display the plot\n## plt.show()\n\n## # Residuals are the difference between the actual values and the fitted values\n## resid_cats = d_cats['Heart_weight'] - lm_cats.fittedvalues\n## \n## # Length of the residuals\n## len_resid_cats = len(resid_cats)\n## \n## # First few residuals\n## head_resid_cats = resid_cats.head()\n## \n## # Output the results\n## print(\"Length of residuals:\", len_resid_cats)\n## print(\"First few residuals:\\n\", head_resid_cats)\n\n## # Set seed for reproducibility\n## np.random.seed(20)\n## \n## # Sample 5 random indices from the range 1 to 144 (Python uses 0-indexing)\n## sample_indices = np.random.choice(range(144), size = 5, replace = False)\n## \n## # Get the corresponding residuals and fitted values using the sampled indices\n## sample_residuals = resid_cats.iloc[sample_indices]\n## sample_fitted = fitted_cats.iloc[sample_indices]\n## \n## # Output the results\n## print(\"Sampled residuals:\\n\", sample_residuals)\n## print(\"Sampled fitted values:\\n\", sample_fitted)\n\n## ## Clean figure object\n## plt.clf()\n## \n## # Create the plot\n## plt.figure(figsize = (10, 6))\n## \n## # 1. Plot Heart_weight vs Body_weight in light gray\n## sns.scatterplot(data = d_cats, x = 'Body_weight', y = 'Heart_weight',\n##                 color = 'lightgray')\n## \n## # 2. Plot the regression line\n## plt.plot(d_cats['Body_weight'], fitted_cats, color = 'black', lw = 2)\n## \n## # 3. Plot red points for the selected indices\n## plt.scatter(d_cats.iloc[sample_indices]['Body_weight'],\n## d_cats.iloc[sample_indices]['Heart_weight'], color = 'red')\n## \n## # 4. Add blue segments (difference between actual and fitted values)\n## for i in sample_indices:\n##     plt.plot([d_cats.iloc[i]['Body_weight'], d_cats.iloc[i]['Body_weight']],\n##              [fitted_cats[i], d_cats.iloc[i]['Heart_weight']], color = 'blue')\n## \n## # Set the title\n## plt.title(\"Model 'lm.cats'\")\n\n## ## Display the plot\n## plt.show()\n\n## ## Clean figure object\n## plt.clf()\n## \n## ## Fit the model\n## lm_cats = smf.ols('Heart_weight ~ Body_weight', data = d_cats).fit()\n## \n## ## Plot the data with model fit\n## plt.figure(figsize = (8, 6))\n## plt.scatter(d_cats['Body_weight'], d_cats['Heart_weight'],\n##             color = 'lightgray', label = 'Original Data')\n## plt.plot(d_cats['Body_weight'], lm_cats.fittedvalues,\n##          color = 'black', label = \"Model 'lm.cats'\")\n## plt.title(\"Model 'lm.cats'\")\n## plt.xlabel('Body Weight')\n## plt.ylabel('Heart Weight')\n## \n## \n## ## New data and predictions\n## new_data_cats = pd.DataFrame({'Body_weight': [4, 2.5, 3]})\n## pred_new_cats = lm_cats.predict(new_data_cats)\n## \n## ## Add predictions to the plot\n## plt.scatter(new_data_cats['Body_weight'], pred_new_cats,\n##             color = 'purple', s = 75, label = 'Predicted Points')\n## \n## ## Adjust plot limits and show\n## plt.xlim(2, 4.1)\n## plt.legend()\n\n## plt.show()\n\n## ## Predictions for new data\n## new_data_cats = pd.DataFrame({'Body_weight': [4, 2.5, 3]})\n## pred_new_cats = lm_cats.predict(new_data_cats)\n## print(pred_new_cats)\n\n## ## Predictions with confidence intervals\n## # pred_new_cats_ci = lm_cats.get_prediction(new_data_cats).summary_frame()\n## pred_new_cats_ci = lm_cats.get_prediction(new_data_cats).conf_int(alpha = 0.05)\n## print(pred_new_cats_ci)\n\n## ## Predictions with confidence intervals\n## # pred_new_cats_ci = lm_cats.get_prediction(new_data_cats).summary_frame()\n## pred_new_cats_ci = lm_cats.get_prediction(new_data_cats).conf_int(alpha = 0.05,\n##                                                                   obs = True)\n## print(pred_new_cats_ci)\n\n## ## Clean figure object\n## plt.clf()\n## \n## ## Plot the data with model fit\n## plt.figure(figsize = (8, 6))\n## plt.scatter(d_cats['Body_weight'], d_cats['Heart_weight'],\n##             color = 'lightgray', label = 'Original Data')\n## plt.plot(d_cats['Body_weight'], lm_cats.fittedvalues,\n##          color = 'black', label = \"Model 'lm.cats'\")\n## plt.title(\"Model 'lm.cats'\")\n## # plt.xlabel('Body Weight')\n## # plt.ylabel('Heart Weight')\n## \n## ## New data and predictions\n## new_data_cats = pd.DataFrame({'Body_weight': [4, 2.5, 3]})\n## pred_new_cats = lm_cats.predict(new_data_cats)\n## \n## ## Compute prediction intervals\n## pred_new_cats_ci = lm_cats.get_prediction(new_data_cats).conf_int(alpha = 0.05,\n##                                                                   obs = True)\n## lower_bounds = pred_new_cats_ci[:, 0]\n## upper_bounds = pred_new_cats_ci[:, 1]\n## \n## ## Add predictions to the plot\n## plt.scatter(new_data_cats['Body_weight'], pred_new_cats,\n##             color = 'purple', s = 75, label = 'Predicted Points')\n## \n## ## Add prediction intervals as error bars\n## plt.errorbar(new_data_cats['Body_weight'], pred_new_cats,\n##              yerr=[pred_new_cats - lower_bounds, upper_bounds - pred_new_cats],\n##              fmt='o', color='purple', capsize=5, label='Prediction Interval')\n## \n## ## Adjust plot limits and show\n## plt.xlim(2, 4.1)\n## plt.legend()\n\n## plt.show()\n\n## ## Set the first 10 observations to 'Unknown'\n## d_cats.loc[:9, 'Sex'] = 'unknown'\n\n## lm_cats_Newsex = smf.ols('Heart_weight ~ Sex', data = d_cats).fit()\n\n## ## Regression coefficients\n## coefficients_unkown = lm_cats_Newsex.params\n## print(\"Regression Coefficients:\")\n## print(coefficients_unkown)\n\n## ## Change the reference level (set 'M' as the reference)\n## ## Before change\n## d_cats['Sex'] = pd.Categorical(d_cats['Sex'], categories = ['M', 'F', 'unknown'])\n\n## ## After change\n## d_cats['Sex'] = d_cats['Sex'].cat.reorder_categories(['M', 'F', 'unknown'],\n##                                                      ordered = True)\n\n## lm_cats_Newsex2 = smf.ols('Heart_weight ~ Sex', data = d_cats).fit()\n\n## ## Regression coefficients\n## coefficients = lm_cats_Newsex2.params\n## print(\"Regression Coefficients:\")\n## print(coefficients)\n\n## print(f\"Formula: {lm_cats.model.formula}\")\n## \n## print(\"\\nCoefficients:\")\n## print(lm_cats.params)\n\n## ## Create dummy variables for 'Sex'\n## X = pd.get_dummies(d_cats[['Body_weight', 'Sex']], drop_first = True)\n## \n## ## # Add constant for intercept\n## X = sm.add_constant(X)\n## X_matrix = X.values\n## print(\"Shape of X (design matrix):\", X_matrix.shape)\n## print(\"\\nFirst few rows of X (design matrix):\")\n## print(X_matrix[:5])  # Display the first 5 rows\n"}