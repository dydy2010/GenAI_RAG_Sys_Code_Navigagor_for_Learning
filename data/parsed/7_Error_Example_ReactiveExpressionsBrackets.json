{"name": "7_Error_Example_ReactiveExpressionsBrackets", "extension": ".R", "course": "RB", "st_mode": 33204, "st_ino": 13091700, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 1453, "st_atime": 1759510073.6920426, "st_mtime": 1759492208.0, "st_ctime": 1759510073.450406, "st_birthtime": 1759492208.0, "st_blocks": 8, "st_blksize": 4096, "content": "library(shiny)\nSys.setenv(LANG = \"en\")\n\n## In this example we cause an error on purpose to illustrate common mistakes\n## with shiny\n\n## In detail we show:\n## * that to access a reactive expression one has to use round brackets\n\n\nui <- fluidPage(\n  textInput(inputId = \"MyText\",\n            label = \"My text input: \"),\n  \n  textOutput(outputId = \"NiceOutput\")\n)\n\nserver <- function(input, output, session) {\n  \n  \n  ## Here we use a reactive conductor. I.e. the reactive element \"input$MyText\"\n  ## is correctly used inside the reactive environment created by \"reactive()\"\n  ## and processed. The reactive environment itself outputs a reactive element,\n  ## i.e. my_rv_expression must be further processed/used in other reactive\n  ## environments.\n  my_rv_expression <- reactive({\n    paste0(\"You entered the following text: \", input$MyText)\n  })\n  \n  \n  \n  ## To access \"my_rv_expression\" one would need to add \"()\" after it.\n  output$NiceOutput <- renderText({\n    my_rv_expression\n  })\n  \n  ## The following would work\n  # output$NiceOutput <- renderText({\n  #   my_rv_expression()\n  # })\n  \n}\n\nshinyApp(ui, server)\n## Error in browser: argument 1 (type 'closure') cannot be handled by 'cat\n##\n## Note that missing round brackets for reactive expression often cause errors\n## in other functions further downstream. Therefore the error message sometimes\n## does not help to find the cause of the error.\n"}