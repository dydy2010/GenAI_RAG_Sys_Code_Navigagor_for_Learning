{"name": "intro_insert_and_update_columns_rows", "extension": ".py", "course": "CIP", "st_mode": 33204, "st_ino": 13098507, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 2095, "st_atime": 1759510058.9092548, "st_mtime": 1759493740.0, "st_ctime": 1759510056.2307727, "st_birthtime": 1759493740.0, "st_blocks": 8, "st_blksize": 4096, "content": "\"\"\"\nContent:\n- insert new values, columns and rows in DataFrames\n\"\"\"\n\nimport pandas\ndf1 = pandas.read_csv(\"traffic.csv\")\n\n# Adding und Update Columns and Rows\n# add a new column with the name 'Status' (inplace operation!)\n\n# we have to fill a new column with 10 values!!!  \n# e.g. [\"F\",\"S\", \"A\", \"B\", \"F\",\"S\", \"A\", \"B\", \"A\", \"C\"]\n\ndf1[\"Status\"] = __FILL_HERE__\n\n# create a new column with the name 'Test' and content 't' (all cells)\n# hint: single values are extended automatically to the size of the dataframe\n__FILL_HERE__ = __FILL_HERE__\n\n# remember 'shape' give us back the dimensionality of the DataFrame\nprint(df1.shape)\n\n# the result is a tuple!   \n# Note:  at position '0' of this tuple => number of rows (=10)\n#        at position '1' of this tuple => number of columns (=8)\n\n# get the number or rows (index) \n\n__FILL_HERE__\n\n# get the number or columns \n\n__FILL_HERE__\n\n############\n# Exercise:\n############\n\n# One value in the DataFrame is wrong:\n# on Index 7 the Clicks-value is wrong. Change the value 40 to 42!\n# use 'iat' or 'iloc'\n# print the first values of df1\nprint(df1.head(10))\n# print all column-names\nprint( __FILL_HERE__ )\n# print all index-name\nprint( __FILL_HERE__ )\n\n__FILL_HERE__ = __FILL_HERE__    \n\n\n###############\n# Exercise\n###############\n\n#  conatenate 2 DataFrames,\n\n# try to insert a row with 'concat()'-method\n\n# reread the original values from our CSV-File \ndf1 = pandas.read_csv(\"traffic.csv\")\n\n# prepare the 'new line to insert' as DataFrame: \n# get the column names of DataFrame df1\ncolumn_names = __FILL_HERE__     \nprint(\"column_names: \", column_names)\n\n# line to insert\ninsert_line1 = [11, 1200 , 15, \"Switzerland\", 30, \"Friday\"]\n\n# create a new DataFrame with the same column_names as fd1 ...\ndf_to_add = pd.DataFrame([insert_line1],columns=column_names )\n# NOTE: insert_line1 is in brackets because the first level a list of lists is expected for multiple rows!\n\n# use 'concat()'' to 'glue' the two DataFrames together: \ndf2 = pd.concat([df1, df_to_add])\n\n# NOTE: the index has not been changed! -> fix that with reset_index()\ndf3 = __FILL_HERE__\n\n"}