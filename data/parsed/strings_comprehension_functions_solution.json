{"name": "strings_comprehension_functions_solution", "extension": ".py", "course": "PDS", "st_mode": 33204, "st_ino": 13100606, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 3160, "st_atime": 1759510075.807601, "st_mtime": 1759494116.0, "st_ctime": 1759510073.5752165, "st_birthtime": 1759494116.0, "st_blocks": 8, "st_blksize": 4096, "content": "#%% string manipulation, list comprehension, functions\n# General hint: Check out the regular expressions package \"re\" in case you encounter problems of this kind. To focus on python basics, we do not use it in this exercise.\n\n#%% Start\nsentence = \"Hello, I am the first sentence, I am happy and I am strong.\"\n\n# Use str.split method to create a list of all elements separated by \" \"\nresult = sentence.split(\" \")\nprint(result)\n\n# Use list comprehension to add \"__\" to every entry of the word list\nresult = [elem + \"__\" for elem in sentence.split(\" \")]\nprint(result)\n\n# Use str.replace to previously remove \",\" and \".\" to get a list of only the words\n\nresult = sentence.replace(\".\",\"\").replace(\",\", \"\").split(\" \")\nprint(result)\n\n# Now you would like to keep punctuation marks as ',' and '.' as separate entries in the list\n# Write a function 'keep_punctuation_word_list', which takes a sentence, extracts \",\" and \".\" from sub-strings and adds them to the list of words at the right position.\n\ndef keep_punctuation_word_list(sentence):\n    a_list = sentence.split(\" \")\n    b_list = []\n    for elem in a_list:\n        if ',' in elem:\n            b_list.append(elem.replace(\",\",\"\"))\n            b_list.append(\",\")\n        elif '.' in elem:\n            b_list.append(elem.replace(\".\",\"\"))\n            b_list.append(\".\")\n        else:\n            b_list.append(elem)\n    return b_list\n\nresult = keep_punctuation_word_list(sentence)\nprint(result)\n\n# Now you want to keep \"!\" and \"?\" as well as separate entries in the list\n# Modify your function: add an additional parameter (special_word_chars = [\",\", \".\"]), which contains all the characters which should be considered a word. -> here, pass the value [\".\", \",\", \"!\", \"?\"]. Modify the body of the function accordingly. Use the given sentence_two.\n\nsentence_two = \"Hello, I am the second sentence! I am happy as well, but also a bit confused. How about you?\"\n\ndef keep_punctuation_word_list_special(sentence, special_word_chars = [\",\", \".\"]):\n    a_list = sentence.split(\" \")\n    b_list = []\n    for elem in a_list:\n        if any([substring in elem for substring in special_word_chars]):\n            # assuming every punctuation mark is at the end of the substring!\n            b_list.append(elem[:-1])\n            b_list.append(elem[-1])\n        else:\n            b_list.append(elem)\n    return b_list\n\nspecial_chars =  [\".\", \",\", \"!\", \"?\"]\nresult = keep_punctuation_word_list_special(sentence_two, special_chars)\nprint(result)\n\n# Now write a function 'put_sentence_together', which takes a list of string elements and returns one string correctly formatted as a sentence. Use \"\".join, list comprehension and an if else condition to add correct spacing. You can treat the first word separately, but you have to handle words contained in the special_chars list (above) separately.\n\n\ndef put_sentence_together(string_list, special_chars=[\".\", \",\", \"!\", \"?\"]):\n    result = my_list[0] + \"\".join([\" \" + elem if elem not in special_chars else elem for elem in my_list[1:]])\n    return result\n\nmy_list = keep_punctuation_word_list_special(sentence_two, special_chars)\nresult = put_sentence_together(my_list)\nprint(result)\n"}