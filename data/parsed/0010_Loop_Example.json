{"name": "0010_Loop_Example", "extension": ".ipynb", "course": "PDS", "st_mode": 33204, "st_ino": 13100482, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 22548, "st_atime": 1759497181.283347, "st_mtime": 1759494042.0, "st_ctime": 1759510073.4682748, "st_birthtime": 1759494042.0, "st_blocks": 48, "st_blksize": 4096, "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Intro Loop Examples   (while, for)\\n\",\n    \"\\n\",\n    \"Some ideas/pictures from https://www.python-course.eu/python3_loops.php  - 'Python Course' Bernd Klein\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Overview for loops Statement\\n\",\n    \"# based on Bernd Klein / Denis Panjuta \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"good morning\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"s = \\\"$#@|~aslbagjkels nspielbiack ipnzqnmyxrclwqpiofpgwirmvoiupq riepwqdjoi pioack o ocpalsig====%%%**>\\\"\\n\",\n    \"print(s[-11:3:-7])    # step size is negative for reverse order\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## While loop\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# if you have to repete some task (commands) => use a loop statment\\n\",\n    \"# simple while - loop\\n\",\n    \"\\n\",\n    \"print(\\\"before the loop ...!\\\") \\n\",\n    \"counter = 5\\n\",\n    \"\\n\",\n    \"while counter < 6:\\n\",\n    \"    print(counter)\\n\",\n    \"    counter = counter + 1                     # counter += 1 \\n\",\n    \"    \\n\",\n    \"print(\\\"further command 1\\\")\\n\",\n    \"print(\\\"further command 2\\\")    \\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"before the loop ...!\\n\",\n      \"Marc\\n\",\n      \"Jessica\\n\",\n      \"Emily\\n\",\n      \"Julia\\n\",\n      \"Jens\\n\",\n      \"further command 1\\n\",\n      \"further command 2\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# Rule:\\n\",\n    \"# Within a loop, a state must necessarily change in every step,\\n\",\n    \"# so that the loop condition is not permanently fulfilled  => Otherwise we have an endless loop\\n\",\n    \"# so that the program can exit the loop again:\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"print(\\\"before the loop ...!\\\")\\n\",\n    \"students = [\\\"Jens\\\", \\\"Julia\\\", \\\"Emily\\\", \\\"Jessica\\\", \\\"Marc\\\"]    # and Tuple?\\n\",\n    \"\\n\",\n    \"i = len(students)\\n\",\n    \"while i > 0:           # len(..)  ist hier 5!\\n\",\n    \"    \\n\",\n    \"    i -= 1                         # same as: i = i + 1\\n\",\n    \"    print(students[i])\\n\",\n    \"    \\n\",\n    \"#    j = i\\n\",\n    \"#    while j < len(students):\\n\",\n    \"#        print(students[j])\\n\",\n    \"#        j += 1\\n\",\n    \"    \\n\",\n    \"\\n\",\n    \"print(\\\"further command 1\\\")\\n\",\n    \"print(\\\"further command 2\\\")  \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## For - loop\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"In addition to the while loop that we saw above, there is also the `for-loop`. <br>\\n\",\n    \"Here a loop variable runs through the values one after the other in a **sequence** that must also be specified.<br>\\n\",\n    \"\\n\",\n    \"Clarify and note (well ;-)): What is a `sequence` and what is an `iterable`<br>\\n\",\n    \"\\n\",\n    \"A Picture? => **https://www.pythoninformer.com/programming-techniques/functional-programming/iterators-vs-iterables/** <br>\\n\",\n    \"We set a Bookmark to **https://docs.python.org/**?\\n\",\n    \"\\n\",\n    \"Result: The `sequence` in a `for-loop` can be e.g. a **list** (logo according to the documentation above ;-)!)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"before the loop ...!\\n\",\n      \"5\\n\",\n      \"8\\n\",\n      \"10\\n\",\n      \"number of iterations was: 3\\n\",\n      \"further command 1\\n\",\n      \"further command 2\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(\\\"before the loop ...!\\\")\\n\",\n    \"\\n\",\n    \"liste1 = [5, 8, 10]                             # List is a  ???\\n\",\n    \"i = 0\\n\",\n    \"\\n\",\n    \"for gugus_no_matter_what_or_what_else in liste1:    # please use instead of 'gugus_no_matter_what_or_what_else'  => i !!!\\n\",\n    \"    print(gugus_no_matter_what_or_what_else)\\n\",\n    \"    i += 1\\n\",\n    \"\\n\",\n    \"print('number of iterations was: ' + str(i))\\n\",\n    \"    \\n\",\n    \"print(\\\"further command 1\\\")\\n\",\n    \"print(\\\"further command 2\\\")      \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"print(\\\"before the loop ...!\\\")\\n\",\n    \"\\n\",\n    \"liste2 = [\\\"Jens\\\", \\\"Julia\\\", \\\"Emily\\\"]\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"for name in liste2:    # instead of 'gugus_no_matter_what_or_what_else'  => 'name' because the list-elements are 'names'!\\n\",\n    \"    print(name)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"    \\n\",\n    \"print(\\\"further command 1\\\")\\n\",\n    \"print(\\\"further command 2\\\")          \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### The range-Object <br>\\n\",\n    \"\\n\",\n    \"You don't necessarily need a `list` as the sequence for a for loop. Often we uses a `range object` instead.\\n\",\n    \"\\n\",\n    \"By the way: Range, String, List, Tuple, ... are sequence data typs!!!\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# basics about range-Object\\n\",\n    \"\\n\",\n    \"print(range(0,6))\\n\",\n    \"print(type(range(0,6)))\\n\",\n    \"a = range(0,6)\\n\",\n    \"print(a)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Ok ...the result of range (0.6) is not satisfactory. \\n\",\n    \"\\n\",\n    \"You don't actually \\\"see\\\" what's in `range (0.6)`.\\\\\\n\",\n    \"In this situation it often helps to call the `list ()` function\\\\\\n\",\n    \"to convert the range-object in a list\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 16,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[0, 1, 2, 3, 4, 5]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"a = range(0,6)              # result: range()\\n\",\n    \"print(list(a))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 20,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"before the loop ...!\\n\",\n      \"0::::zero\\n\",\n      \"1::::one\\n\",\n      \"2::::two\\n\",\n      \"3::::three\\n\",\n      \"4::::four\\n\",\n      \"5::::five\\n\",\n      \"further command 1\\n\",\n      \"further command 2\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# first use of a range-object in a for-loop: \\n\",\n    \"\\n\",\n    \"print(\\\"before the loop ...!\\\")\\n\",\n    \"ll = ['zero', 'one', 'two', 'three', 'four', 'five']\\n\",\n    \"\\n\",\n    \"for i in range(0,6):           # i= 0 bis 5 !!! => a list like [0, 1, 2, 3, 4, 5]\\n\",\n    \"    print(i, end='::::')                   # print all numbers form 0 to 5 \\n\",\n    \"    print(ll[i])\\n\",\n    \"    \\n\",\n    \"print(\\\"further command 1\\\")\\n\",\n    \"print(\\\"further command 2\\\")           \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 30,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"before the loop ...!\\n\",\n      \"further command 1: e.g. 'sum()'\\n\",\n      \"55\\n\",\n      \"further command 2\\n\",\n      \"[0, 1, 2, 3, 4]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# Now we add up all the numbers from 1 to 10 using a for loop and a range object\\n\",\n    \"\\n\",\n    \"print(\\\"before the loop ...!\\\")\\n\",\n    \"\\n\",\n    \"sum = 0\\n\",\n    \"\\n\",\n    \"for number in range(0,11):       # a list like [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\\n\",\n    \"    # sum = sum + number\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"    sum += number\\n\",\n    \"\\n\",\n    \"print(\\\"further command 1: e.g. 'sum()'\\\")    \\n\",\n    \"print(sum)\\n\",\n    \"print(\\\"further command 2\\\")  \\n\",\n    \"print(list(range(5)))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"So far the increment of range() has been 1.\\\\\\n\",\n    \"We can specify a different increment with a third argument.\\\\\\n\",\n    \"The increment is called the `step`. It can be both negative and positive, but not zero:\\n\",\n    \"\\n\",\n    \"**range(begin,end, step)**\\n\",\n    \"\\n\",\n    \"Example with step:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 32,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"[4, 9, 14, 19, 24, 29, 34, 39, 44, 49]\"\n      ]\n     },\n     \"execution_count\": 32,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# print out all numbers form 4 to 50 with step 5:\\n\",\n    \"\\n\",\n    \"list(range(4, 52, 5))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 33,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"[42, 35, 28, 21, 14, 7, 0, -7]\"\n      ]\n     },\n     \"execution_count\": 33,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"#It can be done backwards as well e.g. from 42 to -12 with `step` 7\\n\",\n    \"\\n\",\n    \"list(range(42, -12, -7))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# the same example as above but 'nicer':\\n\",\n    \"n = 100\\n\",\n    \"\\n\",\n    \"sum = 0\\n\",\n    \"for counter in range(1, n+1):\\n\",\n    \"    sum = sum + counter\\n\",\n    \"\\n\",\n    \"print(\\\"Sum of 1 until %d: %d\\\" % (n, sum))     # Output in C-style => more Explanations will follow later!\\n\",\n    \"print(f\\\"Sum of 1 until {n}: {sum}\\\")           # Output with f-Strings  => more Explanations will follow later!\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## When which loop?\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The idea behind the while loop in Python is structured like in the other well-known programming languages.\\n\",\n    \"\\n\",\n    \"On the other hand: **There is no for-loop in Pyhton** as in other programming languages. Really not!!!\\\\\\n\",\n    \"The `for-loop` in Python is a `foreach-loop`!!!\\n\",\n    \"\\n\",\n    \"**Note:** If you use the \\\"for loop\\\" in Python, you always have to think like this:\\n\",\n    \"\\n\",\n    \"For each element in the \\\"sequence\\\" (list, range, string, ...) something is done ...!\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 34,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"before the loop ...!\\n\",\n      \"1\\n\",\n      \"2\\n\",\n      \"3\\n\",\n      \"4\\n\",\n      \"5\\n\",\n      \"6\\n\",\n      \"further command 1\\n\",\n      \"further command 2\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# use of normal 'while'-loop:\\n\",\n    \"\\n\",\n    \"print(\\\"before the loop ...!\\\")\\n\",\n    \"counter = 0\\n\",\n    \"while counter < 6:\\n\",\n    \"    counter += 1\\n\",\n    \"    print(counter)\\n\",\n    \"\\n\",\n    \"print(\\\"further command 1\\\")\\n\",\n    \"print(\\\"further command 2\\\")        \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 35,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"before the loop ...!\\n\",\n      \"1\\n\",\n      \"2\\n\",\n      \"3\\n\",\n      \"4\\n\",\n      \"5\\n\",\n      \"6\\n\",\n      \"further command 1\\n\",\n      \"further command 2\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# use of 'for'-loop: We think always: for each element in the sequence (list, tupel, range, ...)\\n\",\n    \"#                                     we do 'something' with the object 'i' (in this example)\\n\",\n    \"# IMPORTANT:  The name of object 'i' can be chosen arbitrarily!\\n\",\n    \"#             'i' is an object (variable) which goes through the sequence (list, tupel, range, ...)\\n\",\n    \"\\n\",\n    \"print(\\\"before the loop ...!\\\")\\n\",\n    \"\\n\",\n    \"for i in range(1,7):    \\n\",\n    \"    print(i)\\n\",\n    \"    \\n\",\n    \"print(\\\"further command 1\\\")\\n\",\n    \"print(\\\"further command 2\\\")         \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"**Summary:**\\n\",\n    \"- When you need to iterate through a sequence, choose the `for-loop`.\\n\",\n    \"- In all other cases choose the `while-loop`\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Continue\\n\",\n    \"We simply need to write the word **continue** in a loop if we want to jump to the new loop iteration at a certain point:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 36,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"before the loop ...!\\n\",\n      \"0\\n\",\n      \"1\\n\",\n      \"2\\n\",\n      \"4\\n\",\n      \"5\\n\",\n      \"further command 1\\n\",\n      \"further command 2\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# In this example, the print() command is skipped for the value 3.\\n\",\n    \"# But we stay in the loop !!! => No interruption of the for-loop\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"print(\\\"before the loop ...!\\\")\\n\",\n    \"for i in range(0, 6):\\n\",\n    \"\\n\",\n    \"    if i == 3:\\n\",\n    \"        continue             # no print(3) => go to next iteration-step of the for-loop\\n\",\n    \"    \\n\",\n    \"    print(i)\\n\",\n    \"    \\n\",\n    \"print(\\\"further command 1\\\")\\n\",\n    \"print(\\\"further command 2\\\")      \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Break\\n\",\n    \"If we write **break** on a line (often after an if-condition) `the whole loop is aborted` (the loop is exited immediately)\\\\ and the program line(s) AFTER the loop are executed (if there are such program-lines)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 37,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"before the loop ...!\\n\",\n      \"0\\n\",\n      \"1\\n\",\n      \"2\\n\",\n      \"further command 1\\n\",\n      \"further command 2\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# we go through the loop and if i = 3, the loop is left completely\\n\",\n    \"print(\\\"before the loop ...!\\\")\\n\",\n    \"for i in range(0, 6):\\n\",\n    \"    \\n\",\n    \"    if i == 3:\\n\",\n    \"        break              # if i=3 we will break the loop => go to the commands AFTER the loop!\\n\",\n    \"    \\n\",\n    \"    print(i)\\n\",\n    \"    \\n\",\n    \"print(\\\"further command 1\\\")\\n\",\n    \"print(\\\"further command 2\\\")          \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 42,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"before the loop ...!\\n\",\n      \"23\\n\",\n      \"[4, 6, 7, 2, 4]\\n\",\n      \"[4, 10, 17, 19, 23]\\n\",\n      \"further command 1\\n\",\n      \"further command 2\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# Another example: \\n\",\n    \"# Try to find out what this program does WITHOUT running it first. After: Check your answer!\\n\",\n    \"\\n\",\n    \"liste = [4, 6, 7, 2, 4, 6, 7]\\n\",\n    \"s = 0\\n\",\n    \"number_list = []\\n\",\n    \"number_sum_list = []\\n\",\n    \"\\n\",\n    \"print(\\\"before the loop ...!\\\")\\n\",\n    \"\\n\",\n    \"for element in liste:\\n\",\n    \"    s = s + element\\n\",\n    \"    number_list.append(element)\\n\",\n    \"    number_sum_list.append(s)\\n\",\n    \"    if s > 20:\\n\",\n    \"        break\\n\",\n    \"print(s)\\n\",\n    \"print(number_list)\\n\",\n    \"print(number_sum_list) \\n\",\n    \"        \\n\",\n    \"print(\\\"further command 1\\\")\\n\",\n    \"print(\\\"further command 2\\\")       \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 41,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"[1, 2, 3, 4, 5]\\n\",\n      \"[1, 2, 3, 4, 5]\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"ll = [1,2,3,4]\\n\",\n    \"# variants to append 5 to the list ll:\\n\",\n    \"# 1. append function: ll.append(5)\\n\",\n    \"# 2. concatenate lists\\n\",\n    \"\\n\",\n    \"# variation 1:\\n\",\n    \"ll.append(5)\\n\",\n    \"print(ll)\\n\",\n    \"\\n\",\n    \"ll = [1,2,3,4]\\n\",\n    \"# variation 2:\\n\",\n    \"ll += [5]\\n\",\n    \"print(ll)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### else-part\\n\",\n    \"\\n\",\n    \"Similar to the if statement, the **while- and the for-loop** of Python has also an optional `else-part`. \\n\",\n    \"\\n\",\n    \"**Attention:** This is an unfamiliar construct for many programmers of traditional programming languages (Java, C#,...)\\n\",\n    \"\\n\",\n    \"Simple rule for the use of the `else-part`:\\n\",\n    \"The statements in the `else-part` are executed, when the condition is not fulfilled anymore. \\n\",\n    \"\\n\",\n    \"Some some experienced developers might ask themselves now, where the possible benefit of this extra branch is. \\n\",\n    \"If the statements of the additional `else-part` were placed right after the while loop without an else, they would have been executed anyway, wouldn't they? \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"<div>\\n\",\n    \"<img src=\\\"https://www.python-course.eu/images/while_loop_with_else.png\\\" width=\\\"300\\\"/>\\n\",\n    \"</div>\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The experienced programmers among you are right, as long as you don't use a **break-command**. \\\\\\n\",\n    \"If a `break-command` is used, the whole loop (while- or for-loops!) `is left immediately`, i.e. also the \\\"else\\\" part is skipped!\\n\",\n    \"\\n\",\n    \"Look at the picture below this cell to understand ...!\\n\",\n    \"\\n\",\n    \"From experience we can tell you: The \\\"else\\\" part is rarely used (especially not by programmers who know other languages very well).\\\\\\n\",\n    \"You can also program without this feature\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"<div>\\n\",\n    \"<img src=\\\"https://www.python-course.eu/images/while_loop_with_else_break.png\\\" width=\\\"300\\\"/>\\n\",\n    \"</div>\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Here are two examples where `else` and `break` are used:\\n\",\n    \"\\n\",\n    \"**Example 1:** With **else-Teil** (for C, C# and Java-programmer a NEW (!!!) thing)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# The loop can be broken off with e.g. -1 !\\n\",\n    \"import random\\n\",\n    \"n = 20\\n\",\n    \"to_be_guessed = random.randint(1, n)\\n\",\n    \"guess = 0\\n\",\n    \"while guess != to_be_guessed:\\n\",\n    \"    guess = int(input(\\\"New trial: \\\"))\\n\",\n    \"    if guess > 0:\\n\",\n    \"        if guess > to_be_guessed:\\n\",\n    \"            print(\\\"Number too large\\\")\\n\",\n    \"        elif guess < to_be_guessed:\\n\",\n    \"            print(\\\"Number too small\\\")\\n\",\n    \"    else:\\n\",\n    \"        print(\\\"Sorry that you are giving up!\\\")\\n\",\n    \"        break\\n\",\n    \"else:\\n\",\n    \"    print(\\\"Congratulation! You did it!\\\")\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"**Example 2:**  You can also program a `foot-controlled` loop with a `break` command.\\n\",\n    \"    \\n\",\n    \"Normaly there is no (!!! realy not !!!) `foot-controlled` loop in python! )\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# You can stop with e.g. -1 !\\n\",\n    \"import random\\n\",\n    \"n = 20\\n\",\n    \"to_be_guessed = random.randint(1,n)\\n\",\n    \"# print(to_be_guessed)\\n\",\n    \"guess = 0\\n\",\n    \"while True:\\n\",\n    \"    guess = int(input(\\\"New trial: \\\"))\\n\",\n    \"    if guess > 0:\\n\",\n    \"        if guess > to_be_guessed:\\n\",\n    \"            print(\\\"Number too large\\\")\\n\",\n    \"        elif guess < to_be_guessed:\\n\",\n    \"            print(\\\"Number too small\\\")\\n\",\n    \"    # repeat until:\\n\",\n    \"    if guess == to_be_guessed:\\n\",\n    \"        print(\\\"Congratulation! You did it!\\\")\\n\",\n    \"        break\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"The above example still has a small error => Please correct\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Solution for Example 2:  There was no feedback when a user stopped the 'game'!\\n\",\n    \"\\n\",\n    \"# This example still has a small error => Please correct\\n\",\n    \"# You can stop with e.g. -1 !\\n\",\n    \"import random\\n\",\n    \"n = 20\\n\",\n    \"to_be_guessed = random.randint(1,n)\\n\",\n    \"print(to_be_guessed)\\n\",\n    \"guess = 0\\n\",\n    \"while True:\\n\",\n    \"    guess = int(input(\\\"New trial: \\\"))\\n\",\n    \"    if guess > 0:\\n\",\n    \"        if guess > to_be_guessed:\\n\",\n    \"            print(\\\"Number too large\\\")\\n\",\n    \"        elif guess < to_be_guessed:\\n\",\n    \"            print(\\\"Number too small\\\")\\n\",\n    \"    # repeat until:\\n\",\n    \"    if guess == to_be_guessed:\\n\",\n    \"        print(\\\"Congratulation! You did it!\\\")\\n\",\n    \"        break\\n\",\n    \"    elif guess < 0:\\n\",\n    \"        print(\\\"Sorry that you are giving up!\\\")\\n\",\n    \"        break\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.10.12\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n"}