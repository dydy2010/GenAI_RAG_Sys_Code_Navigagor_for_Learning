{"name": "LM_Trees_NonLinearityLab", "extension": ".R", "course": "MPM01", "st_mode": 33204, "st_ino": 13100120, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 9461, "st_atime": 1759510061.0995605, "st_mtime": 1759494000.0, "st_ctime": 1759510056.3360991, "st_birthtime": 1759494000.0, "st_blocks": 24, "st_blksize": 4096, "content": "## ----getData---------------------------------------------\nd.trees <- read.csv2(\"../../Datasets/TreesChamagne2017_Lab_modified.csv\",\n                     stringsAsFactors = TRUE)\n##\nstr(d.trees)\nhead(d.trees)\n\n\n## ----diversitySite, message=FALSE------------------------\nlibrary(ggplot2)\ngg.density.site <- ggplot(data = d.trees,\n       mapping = aes(y = growth.rate,\n                     x = density.site)) + \n  geom_point()\n##\ngg.density.site +\n  geom_smooth()\n\n\n## ----lmQuadraticEffects----------------------------------\n## 1) model with a linear effect for density.site\nlm.trees.1 <- lm(growth.rate ~ species + age + diversity.site +\n                   density.site,\n                 data = d.trees)\n##\n## 2) model with a quadratic effect for density.site\nlm.trees.2 <- update(lm.trees.1, . ~ . + I(density.site^2))\n\n\n## ----testinQuadratic-------------------------------------\nanova(lm.trees.1, lm.trees.2)\n\n\n## ----PlotDensitySiteQuadratic, echo=FALSE, message=FALSE----\ngg.density.site + \n  geom_smooth(method = \"lm\", \n              formula = y ~ poly(x, degree = 2))\n## NOTE\n## This is NOT exactly what the model predicts... it is just the marginal estimation...for conditional we need to make predictions\n## This concept is not explained in the course\n\n\n## ----quadraticaViaPoly-----------------------------------\nlm.trees.3 <- lm(growth.rate ~ species + age + diversity.site +\n                           poly(density.site, degree = 2),\n                 data = d.trees)\n\n\n## ----simulateData, echo=FALSE----------------------------\nset.seed(123)\nn <- 100\n##\nx1 <- seq(from = -1, to = 20, length.out = n)\ny1 <- -0.0057 * x1^3 + 0.1424 * x1^2\nyy <- y1 + rnorm(n = n, mean = 0, sd = 0.5)\n##\nsim.data <- data.frame(y1, x1, yy)\n\n\n## ----plotTrueAndObs, echo=FALSE--------------------------\n## A) true relationship\ngg.sim <- ggplot(data = sim.data,\n                 mapping = aes(x = x1))\n##\ngg.true <- gg.sim +\n  geom_line(mapping = aes(y = y1)) +\n  ggtitle(\"True relationship\")\n##\n## B) observed\ngg.obs <- gg.sim +\n  geom_point(mapping = aes(y = yy)) +\n  ggtitle(\"Observations\")\n##\n## C) both together\nlibrary(gridExtra)\ngrid.arrange(gg.true, gg.obs, ncol = 2)\n\n\n## ----PlotSimDataLm, echo=FALSE, message=FALSE------------\ngg.obs + \n  geom_smooth(method = \"lm\", \n              mapping = aes(y = yy),\n              se = FALSE) +\n  ggtitle(\"Linear effect of x1\")\n\n\n## ----plotSimDataQuadratic, echo=FALSE, message=FALSE-----\ngg.obs + \n  geom_smooth(method = \"lm\", \n              formula = y ~ poly(x, degree = 2),\n              mapping = aes(y = yy),\n              se = FALSE) +\n  ggtitle(\"Quadratic polynomial for x1\")\n\n\n## ----plotSimDataCubic, echo=FALSE, message=FALSE---------\ngg.obs + \n  geom_smooth(method = \"lm\", \n              formula = y ~ poly(x, degree = 3),\n              mapping = aes(y = yy),\n              se = FALSE) +\n  ggtitle(\"Cubic polynomial for x1\")\n\n\n## ----cubicLm---------------------------------------------\nlm.cubic <- lm(yy ~ poly(x1, degree = 3), data = sim.data)\nsummary(lm.cubic)\n\n\n## ----PredictionsOutside, echo=FALSE, message=FALSE, warning=FALSE----\nd.pred.cubic.lm.outside <- data.frame(x1 = seq(from = -5,\n                                       to = 25,\n                                       length.out = 100))\npred.cubic.outside <- predict(lm.cubic, \n                              newdata = d.pred.cubic.lm.outside)\n##\n## Graph\ngg.sim +\n  geom_point(mapping = aes(y = sim.data$yy)) +\n  geom_line(mapping = aes(y = pred.cubic.outside,\n                          x = d.pred.cubic.lm.outside$x1),\n            col = \"red\") +\n    geom_smooth(method = \"lm\", \n              formula = y ~ poly(x, degree = 3),\n              mapping = aes(y = yy),\n              se = FALSE, col = \"black\")\n\n\n## ----bSplinesLM, message=FALSE---------------------------\nlibrary(splines)\nlm.regressionSplines <- lm(yy ~ bs(x1, df = 3), data = sim.data)\nsummary(lm.regressionSplines)\n\n\n## ----plotBsFit, echo=FALSE-------------------------------\nsim.data$fit.bs <- fitted(lm.regressionSplines)\nggplot(data = sim.data,\n       mapping = aes(y = yy,\n                     x = x1)) +\n  geom_point() +\n  geom_line(mapping = aes(y = fit.bs))\n\n\n## ----graphPredictionsOutsideFittingRegion, echo=FALSE, message=FALSE----\nrequire(mgcv)\ngam.un.1 <- gam(yy ~ s(x1, fx = TRUE, k = 4), data = sim.data)\nplot(gam.un.1, residuals = TRUE, cex = 3, xlim = c(-5, 25))\n## This is not fully correct\n## as we are not using a B-spline, but rather the thin plate regression splines...\n\n\n## ----headOfBs, include=FALSE-----------------------------\n## (this chunk is not included)\nhead(bs(sim.data$x1), df = 3)\n\n\n## ----GraphChooseComplexits, echo=FALSE, message=FALSE----\ngg.1 <- gg.obs + \n  geom_smooth(method = \"lm\", \n              formula = y ~ poly(x, degree = 1),\n              mapping = aes(y = yy),\n              se = FALSE) +\n  ggtitle(\"Not complex enough (degree = 1)\")\ngg.1\n##\ngg.2 <- gg.obs + \n  geom_smooth(method = \"lm\", \n              formula = y ~ poly(x, degree = 2),\n              mapping = aes(y = yy),\n              se = FALSE) +\n  ggtitle(\"Better, but not yet enough\")\n##\ngg.3 <- gg.obs + \n  geom_smooth(method = \"lm\", \n              formula = y ~ poly(x, degree = 3),\n              mapping = aes(y = yy),\n              se = FALSE) +\n  ggtitle(\"Quite Right (degree = 3)\")\ngg.3\n##\ngg.4 <- gg.obs + \n  geom_smooth(method = \"lm\", \n              formula = y ~ poly(x, degree = 25),\n              mapping = aes(y = yy),\n              se = FALSE) +\n  ggtitle(\"Too complex  (degree = 25)\")\ngg.4\n##\n# grid.arrange(gg.1, gg.2, gg.3, gg.4, ncol = 2)\n\n\n## ----fitGamTrees-----------------------------------------\nlibrary(mgcv)\ngam.1 <- gam(yy ~ s(x1), data = sim.data)\nsummary(gam.1)\n\n\n## ----effectOfx1------------------------------------------\nplot(gam.1, residuals = TRUE, cex = 2)\n\n\n## ----GAMTreeGrowth---------------------------------------\ngam.trees.1 <- gam(growth.rate ~ species + \n                     s(density.site) + s(diversity.site), \n                   data = d.trees)\nsummary(gam.trees.1)\n\n\n## ----plotGamDensity--------------------------------------\nplot(gam.trees.1, residuals = TRUE, select = 1)\n\n\n## ----gamTrees2-------------------------------------------\ngam.trees.2 <- gam(growth.rate ~ species + \n                     s(density.site) + diversity.site, \n                   data = d.trees)\nsummary(gam.trees.2)\n\n\n## ----ModelPancia-----------------------------------------\n## 1) get data\nd.pancia <- read.table(\"../../Datasets/Crescita.txt\",\n                       header = TRUE)\n## \n## 2) declare Dates as such\nd.pancia$MeasurementDate_AsDate <- as.Date(\n  d.pancia$MeasurementDate,\n  format = \"%d-%m-%Y\")\n## check\nhead(d.pancia)\nstr(d.pancia)\n\n\n## ----GraphPancia, message=FALSE--------------------------\ngg.pancia <- ggplot(data = d.pancia,\n       mapping = aes(y = Circonferenza,\n                     x = MeasurementDate_AsDate)) +\n  geom_point() +\n  geom_smooth() +\n  ylab(\"Girth [cm]\") +\n  ggtitle(\"Girth growth\") \ngg.pancia\n\n\n## ----gamGirth, include=FALSE-----------------------------\ngam.girth <- gam(Circonferenza ~ s(as.numeric(MeasurementDate_AsDate)),\n                 data = d.pancia) ## or\n## equivalent to:\ngam.girth <- gam(Circonferenza ~ s(Week),\n                 data = d.pancia)\n## note, however, that date is a more precise measurement than week\n## in practice nothing changes here.\n##\nsummary(gam.girth)\n\n\n## ----plotGAmGirth, include=FALSE-------------------------\nplot(gam.girth, residuals = TRUE, cex = 3)\n\n\n## ----createDiversity2------------------------------------\nset.seed(12)\nd.trees$diversity.2 <- d.trees$diversity.site + \n  rnorm(n = nrow(d.trees), sd = 0.05)\n##\nplot(diversity.2 ~ diversity.site, data = d.trees)\n\n\n## ----LmDiversity-----------------------------------------\nlm.trees.4 <- lm( growth.rate ~ species + age + diversity.site, \n                  data = d.trees)\nsummary(lm.trees.4)\n\n\n## ----LmDivesityAddSecond---------------------------------\nlm.trees.5 <- update(lm.trees.4, . ~ . + diversity.2)\nsummary(lm.trees.5)\n\n\n## ----CoeffsDiversity-------------------------------------\ncoef(lm.trees.4)[\"diversity.site\"]\n##\ncoef(lm.trees.5)[\"diversity.site\"]\n\n\n## ----SEModelsDiversity-----------------------------------\nsummary(lm.trees.4)$coefficients[\"diversity.site\", ]\n##\nsummary(lm.trees.5)$coefficients[\"diversity.site\", ]\n\n\n## ----vifLM4----------------------------------------------\nlibrary(car)\nvif(lm.trees.4)\n\n\n## ----vifLM5----------------------------------------------\nvif(lm.trees.5)\n\n\n## ----gamWithIneraction, eval=FALSE-----------------------\n# gam.trees.3 <- gam(growth.rate ~ species +\n#                      s(density.site, by = species),\n#                    data = d.trees)\n# summary(gam.trees.3)\n\n\n## ----gamTensor, eval=FALSE-------------------------------\n# gam.trees.4 <- gam(growth.rate ~ species +\n#                      s(size) + s(X, Y), ## X and Y are coordinates\n#                    data = d.trees)\n\n\n## ----familyGam-------------------------------------------\ngam.1\n## or\n# summary(gam.1)\n\n\n## ----gamCheck--------------------------------------------\ngam.check(gam.1)\n\n\n## ----formulaTrees2---------------------------------------\nformula(lm.trees.2)\n# summary(lm.trees.2)\n\n\n## ----twoFoldFormulae-------------------------------------\nlm.two.fold <- lm(growth.rate ~ (species + age + diversity.site + density.site + density.site)^2, \n                  data = d.trees)\nsummary(lm.two.fold)\n\n\n## ----sessionINfo, size='footnotesize'--------------------\nsessionInfo()\n\n"}