{"name": "democode_unit_tests", "extension": ".R", "course": "RB", "st_mode": 33204, "st_ino": 13091701, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 10257, "st_atime": 1759510075.5680103, "st_mtime": 1759492208.0, "st_ctime": 1759510073.4854152, "st_birthtime": 1759492208.0, "st_blocks": 24, "st_blksize": 4096, "content": "library(testthat) \nlocal_edition(3)\n## testthat 3.0.0 introduces the idea of an \u201cedition\u201d of testthat. \n## An edition is a bundle of behaviours that you have to explicitly choose to use,\n## allowing us to make otherwise backward incompatible changes.\n## This is particularly important for testthat since it has a very large number\n## of packages that use it (almost 5,000 at last count).\n## Choosing to use the 3rd edition allows you to use our latest recommendations \n## for ongoing and new work, while historical packages continue to use the old behaviour.\n## https://testthat.r-lib.org/articles/third-edition.html\n\n\n\n\n# f.sum.sym.mat ----------------------------------------------------------------\n\n## We create a function that sums two symmetric matrices\n\n\nf.sum.sym.mat <- function(S1, S2){\n  \nS1 + S2\n  \n}\n\ntest_that(\"Matrices not symmetric\", {\n  \n  M1 <- matrix(c(2, 1, 2, 1), nrow = 2) ## not symmetric\n  M2 <- matrix(c(2, 3, 3, 1), nrow = 2) ## symmetric\n  M1\n  M2\n  \n  expect_error(f.sum.sym.mat(M1, M2), \"not symmetric\")\n})\n\n\n# f.sum.sym.mat v2 ----------------------------------------------------------------\n\n## We create a function that sums two symmetric matrices\n\n\nf.sum.sym.mat2 <- function(S1, S2){\n  \n  \n  stopifnot(\"At least one of the two matrices is not symmetric\" =\n              (isSymmetric(S1) & isSymmetric(S2)) )\n  \n  S1 + S2\n  \n}\n\n\n\ntest_that(\"Matrices not symmetric\", {\n  \n  M1 <- matrix(c(2, 1, 2, 1), nrow = 2)\n  M2 <- matrix(c(2, 3, 3, 1), nrow = 2)\n  \n  expect_error(f.sum.sym.mat2(M1, M2), \"not symmetric\")\n})\n\n\n\n\n\n\n\n\n\n\n#####################\n### GOING FURTHER ###\n#####################\n\n\n\n\n# rv.multivariate_v1 ------------------------------------------------------------------------------\n\n## We create a function that generates a bivariate random variable with \n## variance-covariance matrix V and mean mu\n\n## @param mu,  a numeric vector of length 2. It represents the mean of the bivariate distribution\n## from which we want to sample a vector.\n## @param V, a 2x2 numeric matrix. It represents the variance-covariance matrix \n## of the distribution from which we want to sample a vector. V has to be symmetric\nrv.multivariate <- function(mu, V){\n  \n  m <- length(mu)\n  U <- chol(V)\n  Z <- rnorm(m, 0, 1)\n  x <- t(U) %*% Z + mu\n  return(x)\n  \n}\n\n\n\n# Working example --------------------------------------------------------------\n\n\nmu <- c(2, 3)\nV <- matrix(c(4, -3, -3, 9), ncol = 2, byrow = TRUE)\n\nrv.multivariate(mu = mu, V = V)\n## each time it samples a different vector\n\n\n\n# Unit tests 1 --------------------------------------------------------------------\n\n\n\n## What if the elements passed to the function do not have the right dimension?\n## We create unit tests to verify this.\n\ntest_that(\"dimension errors\", {\n  \n  #### Defining objects ####\n  \n  \n  ## Elements with the correct dimensions\n  mu <- c(2, 3)\n  V <- matrix(c(4, -3, \n                -3, 9), \n              ncol = 2, byrow = TRUE)\n  \n  ## Two options for mu, both having wrong dimension\n  mu1 <- 1\n  mu3 <- c(1, 2, 3)\n  \n  ## Three options for V, having wrong dimension\n  V21 <- c(4, 9)\n  V33 <- matrix(c(4, 0, 0, \n                  0, 2, 0, \n                  0, 0, 9), \n                ncol = 3, byrow = TRUE)\n  ## Not squared\n  V32 <- matrix(c(4, 0, \n                  0, 2, \n                  0, 9), \n                ncol = 2, byrow = TRUE)\n  V23 <- t(V32)\n  \n  \n  \n  #### Defining tests ####\n  \n  \n  \n  ## Here we test that our function throws an error if we pass a mean vector mu\n  ## having wrong dimension\n  expect_error(rv.multivariate(mu = mu1, V = V), regexp = \"non-conformable\")\n  expect_error(rv.multivariate(mu = mu3, V = V), regexp = \"non-conformable\")\n  ## both test pass without returning anything, meaning that the test passed.\n  ## This shows that the function throws an error containing the pattern \n  ## \"non-conformable\" when a vector of wrong dimension is passed for the mean\n  \n  ## Here we test the same thing, but for the wrong dimension of V\n  expect_error(rv.multivariate(mu = mu, V = V21), regexp = \"square matrix\")\n  expect_error(rv.multivariate(mu = mu, V = V33), regexp = \"non-conformable\")\n  expect_error(rv.multivariate(mu = mu, V = V32), regexp = \"square matrix\")\n  expect_error(rv.multivariate(mu = mu, V = V23), regexp = \"square matrix\")\n  ## Again, the tests passed, meaning that the right error is thrown  \n \n})\n\n## All the tests succeeded\n\n## What if V has strange values, not as desired?\n## For example is not non-negative definite, or is not symmetric\n\n\ntest_that(\"values error\", {\n  \n  \n  #### Defining objects ####\n  \n  \n  ## Elements with the correct dimensions\n  mu <- c(2, 3)\n  V <- matrix(c(4, -3,\n                -3, 9), \n              ncol = 2, byrow = TRUE)\n  \n  ## The covariance matrix V has to be symmetric and non negative \n  ## values on the diagonal\n  \n\n  ## We define a squared matrix which is not non-negatively definite\n  Vneg <- matrix(c(-2, 0,\n                   0, -9),\n                 ncol = 2, byrow = TRUE)\n  \n  \n  ## We define a matrix which is not symmetric\n  Vnotsym <- matrix(c(4, -3, \n                      -2, 9),\n                    ncol = 2, byrow = TRUE)\n  \n  \n  \n  \n  #### Defining tests ####\n  \n  \n  \n  ## We test whether a matrix which is not non-negatively definite throws the \n  ## expected error when passed as var-cov matrix V\n  expect_error(rv.multivariate(mu = mu, V = Vneg), regexp = \"not positive definite\")\n  ## The test throws the expected error\n  \n\n  ## We test whether a non symmetric matrix throws the expected error when \n  ## passed as var-cov matrix\n  expect_error(rv.multivariate(mu = mu, V = Vnotsym), regexp = \"not a var-cov matrix\")\n  ## This test does not pass. The expected error in not thrown.\n  ## Indeed, I did not specify anything for test this, \n  ## and there is not a default error for this specific problem,\n  ## thus my function does not behave as expected\n  ## We have to modify the function to test that the var-cov matrix is symmetric\n  \n  \n})\n\n\n\n## We modify the code to add this test\n\n\n\n\n# rv.multivariate_v2 ------------------------------------------------------------------------------\n\nrv.multivariate_v2 <- function(mu, V){\n  \n  ## Test whether V is symmetric. If not, return an error\n  if( !isSymmetric(V) ){\n    stop(\"This is not a var-cov matrix\")\n  } else {\n    m <- length(mu)\n    U <- chol(V)\n    Z <- rnorm(m, 0, 1)\n    x <- t(U) %*% Z + mu\n    \n    return(x)\n  }\n  \n}\n\n\n# Unit tests 2 --------------------------------------------------------------------\n\n\n## Run again the previous unit tests for dimension errors\ntest_that(\"dimension errors\", {\n  \n  \n  \n  #### Defining objects ####\n  \n  \n  ## Elements with the correct dimensions\n  mu <- c(2, 3)\n  V <- matrix(c(4, -3, \n                -3, 9), \n              ncol = 2, byrow = TRUE)\n  \n  ## Wrong dimension for mu\n  mu1 <- 1\n  mu3 <- c(1, 2, 3)\n  \n  ## Wrong dimension for V\n  V21 <- c(4, 9)\n  V33 <- matrix(c(4, 0, 0,\n                  0, 2, 0,\n                  0, 0, 9), \n                ncol = 3, byrow = TRUE)\n  \n  ## Not squared\n  V32 <- matrix(c(4, 0, \n                  0, 2, \n                  0, 9),\n                ncol = 2, byrow = TRUE)\n  V23 <- t(V32)\n  \n  #### Defining tests ####\n  \n  \n  \n  ## Wrong dimension for mu\n  expect_error(rv.multivariate_v2(mu = mu1, V = V), regexp = \"non-conformable\")\n  expect_error(rv.multivariate_v2(mu = mu3, V = V), regexp = \"non-conformable\")\n  \n  ## Wrong dimension for V\n  expect_error(rv.multivariate_v2(mu = mu, V = V21), regexp = \"var-cov matrix\")\n  ## This test does not return the desired error\n  expect_error(rv.multivariate_v2(mu = mu, V = V33), regexp = \"non-conformable\")\n  expect_error(rv.multivariate_v2(mu = mu, V = V32), regexp = \"var-cov matrix\")\n  expect_error(rv.multivariate_v2(mu = mu, V = V23), regexp = \"var-cov matrix\")\n})\n\n\n# rv.multivariate_v3 --------------------------------------------------------------\n\n\nrv.multivariate_v3 <- function(mu, V){\n  \n  ## Test whether V is symmetric. If not, return an error\n  if( ifelse(is.matrix(V), yes = !isSymmetric(V), no = TRUE)  ){\n    stop(\"This is not a var-cov matrix\")\n  } else {\n    m <- length(mu)\n    U <- chol(V)\n    Z <- rnorm(m, 0, 1)\n    x <- t(U) %*% Z + mu\n    \n    return(x)\n  }\n  \n}\n\n# Unit tests 3 --------------------------------------------------------------------\n\n\ntest_that(\"values errors\", {\n  \n  #### Defining objects ####\n  \n  \n  ## Elements with the correct dimensions\n  mu <- c(2, 3)\n  V <- matrix(c(4, -3, \n                -3, 9), ncol = 2, byrow = TRUE)\n  \n  \n  ## Non-positive definite V\n  Vneg <- matrix(c(-2, 0, \n                   0, -9), ncol = 2, byrow = TRUE)\n  \n  \n  #### Defining tests ####\n  \n  \n  ## Non-symmetric V\n  Vnotsym <- matrix(c(4, -3, \n                      -2, 9), ncol = 2, byrow = TRUE)\n  \n  ## Non positive definite matrix\n  expect_error(rv.multivariate_v3(mu = mu, V = Vneg), regexp = \"not positive definite\")\n  \n\n  ## Not symmetric matrix\n  expect_error(rv.multivariate_v3(mu = mu, V = Vnotsym), regexp = \"not a var-cov matrix\")\n  \n})\n\n\n## We have to adjust the tests for dimension errors \n\n\ntest_that(\"dimension errors\", {\n  \n  \n  \n  #### Defining objects ####\n  \n  \n  ## Elements with the correct dimensions\n  mu <- c(2, 3)\n  V <- matrix(c(4, -3, \n                -3, 9), ncol = 2, byrow = TRUE)\n  \n  ## Wrong dimension for mu\n  mu1 <- 1\n  mu3 <- c(1, 2, 3)\n  \n  ## Wrong dimension for V\n  V21 <- c(4, 9)\n  V33 <- matrix(c(4, 0, 0, \n                  0, 2, 0, \n                  0, 0, 9), ncol = 3, byrow = TRUE)\n  \n  ## Not squared\n  V32 <- matrix(c(4, 0, \n                  0, 2, \n                  0, 9), ncol = 2, byrow = TRUE)\n  V23 <- t(V32)\n  \n  \n  \n  #### Defining tests ####\n  \n  \n  \n  ## Wrong dimension for mu\n  expect_error(rv.multivariate_v3(mu = mu1, V = V), regexp = \"non-conformable\")\n  expect_error(rv.multivariate_v3(mu = mu3, V = V), regexp = \"non-conformable\")\n  \n  ## Wrong dimension for V\n  expect_error(rv.multivariate_v3(mu = mu, V = c(4, 9)), regexp = \"var-cov matrix\")\n  ## This test now returns the desired error\n  expect_error(rv.multivariate_v3(mu = mu, V = V33), regexp = \"non-conformable\")\n  expect_error(rv.multivariate_v3(mu = mu, V = V23), regexp = \"var-cov matrix\")\n  expect_error(rv.multivariate_v3(mu = mu, V = V32), regexp = \"var-cov matrix\")\n  \n})\n\n\n\n\n\n"}