{"name": "comp_lambda_i", "extension": ".py", "course": "PDS", "st_mode": 33204, "st_ino": 13100590, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 1679, "st_atime": 1759510073.8643274, "st_mtime": 1759494116.0, "st_ctime": 1759510073.38814, "st_birthtime": 1759494116.0, "st_blocks": 8, "st_blksize": 4096, "content": "#!/usr/bin/env python3\n\n# Different problems are solved with for-loops. Review each for-loop solution and \n# solve the problem with list comprehension or map function, as described in the\n# task description.\n\n# the following lists are given for all problems:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nprimes = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23]\n\n# Task 1: copy all even elements from 'nums' into a new list.\nprint(\"\\n---- Task 1 ----\")\nmy_list = []\nfor n in nums:\n  if not n%2\n    my_list.append(n)\nprint(f\"for loop: {my_list=}\")\n\n# solution with list comprehension:\nmy_list = ...FILL HERE...\nprint(f\"comprehension: {my_list=}\")\n\n\n# Task 2: calculate the square of each element in the list 'nums'.\nprint(\"\\n---- Task 2 ----\")\nmy_list = []\nfor n in nums:\n  my_list.append(n*n)\nprint(f\"for loop: {my_list=}\")\n\n# solution with list comprehension:\nmy_list = ...FILL HERE...\nprint(f\"comprehension: {my_list=}\")\n\n\n# Task 3: calculate the square of each element in the list 'nums' by applying\n# a lambda function on the list (using map function).\nprint(\"\\n---- Task 3 ----\")\nmy_list = []\nfor n in nums:\n  my_list.append(n*n)\nprint(f\"for loop: {my_list=}\")\n\n# solution with list comprehension:\nmy_list = list(map( ...FILL HERE... ))\nprint(f\"lambda: {my_list=}\")\n\n\n# Task 4: create nested lists comprising all lower prime numbers up to the \n# given number in 'nums'.\nprint(\"\\n---- Task 4 ----\")\nmy_list = []\nfor n in nums:\n  p_list = []\n  for p in primes:\n    if p <= n:\n      p_list.append(p)\n  my_list.append(p_list)\nprint(f\"for loop: {my_list=}\")\n\n# solution with list comprehension:\nmy_list = ...FILL HERE...\nprint(f\"comprehension: {my_list=}\")\n\n"}