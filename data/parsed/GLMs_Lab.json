{"name": "GLMs_Lab", "extension": ".R", "course": "MPM01", "st_mode": 33204, "st_ino": 13100134, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 12796, "st_atime": 1759510057.7146184, "st_mtime": 1759494000.0, "st_ctime": 1759510056.1967413, "st_birthtime": 1759494000.0, "st_blocks": 32, "st_blksize": 4096, "content": "## ----SimPois, echo=FALSE-------------------------------------------\nset.seed(1)\nno.days <- 14\nv.non.smoker <- c(rpois(n = no.days - 1, lambda = 0), 1)\n## I added a single sigarette to the non-smoker because\n## if you don't do so all p-values are 1...\nv.smoker1_2 <- rpois(n = no.days, lambda = 5)\nv.smoker.box <- rpois(n = no.days, lambda = 20)\nd.smokers <- data.frame(no.cigarettes = \n                          c(v.non.smoker, v.smoker1_2, v.smoker.box),\n                        person = gl(n = 3,\n                                    k = no.days, \n                                    labels = c(\"non-smoker\",\n                                               \"moderate smoker\", \n                                               \"heavy smoker\")))\n##\nlibrary(ggplot2)\nset.seed(3)\n# ggplot(data = d.smokers,\n#        mapping = aes(y = no.cigarettes,\n#                      x = person)) +\n#   geom_jitter(width = 0.05, height = 0, alpha = 0.5) +\n#   scale_y_continuous(breaks = c(0:5,1:3*10)) +\n#   geom_hline(yintercept = 0)\n##\nggplot(data = d.smokers,\n       mapping = aes(y = no.cigarettes,\n                     x = person)) +\n  geom_boxplot() +\n  # scale_y_continuous(breaks = c(0:5, 1:3*10)) +\n  geom_hline(yintercept = 0)\n\n\n## ----coefSmokers---------------------------------------------------\nlm.smokers <- lm(no.cigarettes ~ person, data = d.smokers)\nround(coef(lm.smokers), digits = 1)\n\n\n## ----simObservations-----------------------------------------------\nset.seed(3)\nsim.data.smokers <- simulate(lm.smokers)\n##\nNROW(sim.data.smokers)\nhead(sim.data.smokers)\ntail(sim.data.smokers)\n##\nggplot(mapping = aes(y = sim.data.smokers$sim_1,\n                     x = d.smokers$person)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0) +\n  ylab(\"simulated no. of cigarettes\\n(assuming normality)\") +\n  xlab(\"person\")\n\n\n## ----ExpResults----------------------------------------------------\nexp(-5)\nexp(-2)\nexp(0)\nexp(3)\n\n\n## ----glmPoission---------------------------------------------------\nglm.smokers <- glm(no.cigarettes ~ person, \n                   family = \"poisson\", ## we specify the distribution!\n                   data = d.smokers)\n\n\n## ----summaryPoisson------------------------------------------------\nsummary(glm.smokers)\n\n\n## ----simPoissonFromGLM---------------------------------------------\nset.seed(2)\nsim.data.smokers.Poisson <- simulate(glm.smokers)\n##\nNROW(sim.data.smokers.Poisson)\nhead(sim.data.smokers.Poisson)\ntail(sim.data.smokers.Poisson)\n##\nggplot(mapping = aes(y = sim.data.smokers.Poisson$sim_1,\n                     x = d.smokers$person)) +\n  geom_boxplot() +\n  geom_hline(yintercept = 0) +\n  ylab(\"simulated no. of cigarettes\\n(assuming Poisson dist)\") +\n  xlab(\"person\")\n\n\n## ----blissData-----------------------------------------------------\nlibrary(faraway)\ndata(bliss)\n\n\n## ----strBliss------------------------------------------------------\nstr(bliss)\nbliss\n\n\n## ----computeMortality, message=FALSE-------------------------------\nbliss$total.insects <- bliss$dead + bliss$alive\nbliss$mortality.rate <- bliss$dead / bliss$total.insects\n## \n## or with a more \"modern\" approach\nlibrary(dplyr)\nbliss <- bliss %>% \n  mutate(mortality.rate = round(dead / (dead + alive), digits = 2))\n##\nbliss\n\n\n## ----plotBliss-----------------------------------------------------\nlibrary(ggplot2)\nggplot(data = bliss,\n       mapping = aes(y = mortality.rate,\n                     x = conc)) + \n  geom_point()\n\n\n## ----plotBlissWithLine, message=FALSE------------------------------\nggplot(data = bliss,\n       mapping = aes(y = mortality.rate,\n                     x = conc)) + \n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  ylim(0, 1) +\n  geom_hline(yintercept = 0:1)\n\n\n## ----curveInverseLogistic------------------------------------------\ncurve(expr = ilogit, from = -5, to = 5)\nabline(h = c(0, 1), col = \"gray\")\n\n\n## ----ilogit--------------------------------------------------------\nilogit(-20)\nilogit(-5)\nilogit(0)\nilogit(5)\nilogit(20)\n\n\n## ----fittingGLmInsexts---------------------------------------------\nglm.insects <- glm(cbind(dead, alive) ~ conc,  \n                   family = \"binomial\",\n                   data = bliss)\n\n\n## ----summaryGLMinsects---------------------------------------------\nsummary(glm.insects)\n\n\n## ----plotEffectConc, echo=FALSE------------------------------------\nnew.data = data.frame(conc = seq(0, 5, length.out = 100))\nnew.data$pred.insects <- predict(glm.insects, newdata = new.data,\n                                 type = \"response\")\n##\nggplot(data = bliss,\n       mapping = aes(y = mortality.rate,\n                     x = conc)) + \n  ylim(0,1) +\n  geom_hline(yintercept = 0:1, col = \"gray\") +\n  ##\n  ## predictions for conc 0 --> 5\n  geom_point(data = new.data,\n               mapping = aes(\n      y = pred.insects,\n      x = conc)) +\n  ##\n  ## actual observations\n  geom_point(col = \"red\", \n             size = 3)\n\n\n## ----exampleLogistic, eval=FALSE-----------------------------------\n## glm(survived.surgery ~ age + sex,\n##     family = \"binomial\",\n##     data = someSurgeryData)\n\n\n## ----multinom, message=FALSE---------------------------------------\n## Iris data\nhead(iris)\ntable(iris$Species)\n##\nlibrary(nnet)\nmultinom.iris <- multinom(Species ~ Sepal.Length + Petal.Width, \n                          trace = FALSE,\n                          data = iris)\n\n\n\n## ----stab----------------------------------------------------------\nd.stab <- read.table(\"../../Datasets/stability.dat\", \n                     stringsAsFactors = TRUE,\n                     header = TRUE)\nstr(d.stab)\nhead(d.stab)\n\n\n## ----plotStab------------------------------------------------------\nggplot(data = d.stab,\n       mapping = aes(y = perform,\n                     x = stability)) + \n  geom_point()\n\n\n## ----stabBinomGraph, message=FALSE, echo=FALSE---------------------\nggplot(data = d.stab,\n       mapping = aes(y = perform,\n                     x = stability)) + \n  geom_point() +\n  geom_smooth(method = \"glm\", \n              se = FALSE,\n              method.args = list(family = \"binomial\")) \n\n\n## ----logRegrStab---------------------------------------------------\nglm.stab <- glm(perform ~ stability, \n                data = d.stab, \n                family = \"binomial\")\nsummary(glm.stab)\n\n\n## ----fitteGLm------------------------------------------------------\nfitted(glm.stab) %>% round(digits = 2)\n\n\n## ----discretise----------------------------------------------------\nfitted.stab.disc <- ifelse(fitted(glm.stab) < 0.5,\n                           yes = 0, no = 1)\nhead(fitted.stab.disc)\n\n\n## ----comapreObsFitted----------------------------------------------\nd.obs.fit.stab <- data.frame(obs = d.stab$perform, \n                             fitted = fitted.stab.disc) \nhead(d.obs.fit.stab)\n\n\n## ----tableFotOBs---------------------------------------------------\ntable(d.obs.fit.stab$obs)\n## 14 success and 13 failures in the real data\n##\ntable(obs = d.obs.fit.stab$obs,\n      fit = d.obs.fit.stab$fitted)\n\n\n## ----confusionMatrixPrp--------------------------------------------\ntable(obs = d.obs.fit.stab$obs,\n      fit = d.obs.fit.stab$fitted) %>% \n  prop.table() %>% \n  round(digits = 2)\n\n\n## ----swappinggenderforsex, message=FALSE, echo=FALSE---------------\ndata(\"esdcomp\")\ncolnames(esdcomp)[4] <- \"sex\"\n# colnames(esdcomp)\n\n\n## ----fittingTheComplainGLm-----------------------------------------\nglm.complaints <- glm(complaints ~ . , data = esdcomp, \n                     family = \"poisson\")\n\n\n## ----summaryGLMComplaints------------------------------------------\nsummary(glm.complaints)\n\n\n## ----coefVisits----------------------------------------------------\ncoef(glm.complaints)[\"sexM\"]\n\n\n## ----expGender-----------------------------------------------------\nexp(coef(glm.complaints)[\"sexM\"]) %>% round(digits = 2)\n\n\n## ----firstDoctor---------------------------------------------------\nesdcomp[1, ]\n\n\n## ----fittedForFirstDoctor------------------------------------------\nfitted.first.doctor <- fitted(glm.complaints)[1]\nfitted.first.doctor\n\n\n## ----computeCompainsForFirstAsMale---------------------------------\nfirst.doctor.as.male <- esdcomp[1, ]\nfirst.doctor.as.male$sex <- \"M\"\nfirst.doctor.as.male\n##\npred.first.doc.male <- predict(glm.complaints, \n        type = \"response\", # ! important to set argument \"type\" to response!\n        newdata = first.doctor.as.male)\npred.first.doc.male\n\n\n## ----computingFirstDoctorByHand------------------------------------\nfitted.first.doctor * exp(coef(glm.complaints)[\"sexM\"])\n\n\n## ----expBetaVisits-------------------------------------------------\nexp.coef.visits <- exp(coef(glm.complaints)[\"visits\"])\nprint(exp.coef.visits, digits = 5)\n\n\n## ----rangeVisits---------------------------------------------------\nrange(esdcomp$visits)\n\n\n## ----expBetaVisitsTimes100-----------------------------------------\ncoef.visits.50 <- coef(glm.complaints)[\"visits\"] * 50\ncoef.visits.50\n##\nprint(exp(coef.visits.50), digits = 5)\n\n\n## ----plotEffectConcAgain, echo=FALSE-------------------------------\nnew.data = data.frame(conc = seq(0, 5, length.out = 100))\nnew.data$pred.insects <- predict(glm.insects, newdata = new.data,\n                                 type = \"response\")\n##\nggplot(data = bliss,\n       mapping = aes(y = mortality.rate,\n                     x = conc)) + \n  geom_point() +\n  # geom_smooth(method = \"lm\", se = FALSE) +\n  ylim(0,1) +\n  geom_hline(yintercept = c(0,1)) +\n  geom_line(data = new.data,\n               mapping = aes(\n      y = pred.insects,\n      x = conc))\n\n\n## ----coeffBinom----------------------------------------------------\ncoef(glm.insects)\n\n\n## ----expCoeff------------------------------------------------------\nexp(coef(glm.insects)[\"conc\"])\n\n\n## ----concPlotFited, echo=FALSE-------------------------------------\nggplot(data = bliss,\n       mapping = aes(y = mortality.rate,\n                     x = conc)) + \n  ylim(c(0, 1)) +\n  geom_hline(yintercept = c(0,1)) +\n  geom_segment(mapping = aes( x = 2,\n                              y = 0,\n                              xend = 2,\n                              yend = 0.5),\n                              colour = \"red\") +\n  geom_segment(mapping = aes(x = 0,\n                              y = 0.5,\n                              xend = 2,\n                              yend = 0.5),\n                              colour = \"red\") +\n  geom_segment(mapping = aes( x = 3,\n                              y = 0,\n                              xend = 3,\n                              yend = 0.76),\n                              colour = \"red\") +\n  geom_segment(mapping = aes( x = 0,\n                              y = 0.76,\n                              xend = 3,\n                              yend = 0.76),\n                              colour = \"red\") +\n    geom_line(data = new.data,\n               mapping = aes(\n      y = pred.insects,\n      x = conc))\n\n\n## ----expConcBeta---------------------------------------------------\nexp(coef(glm.insects)[\"conc\"])\n\n\n## ----glmbinomialFactor---------------------------------------------\nbliss$conc.asFactor <- cut(bliss$conc, breaks = c(-Inf, 0, 2, 4),\n                           labels = c(\"no insecticide\", \"low conc\", \"high conc\"))\nlevels(bliss$conc.asFactor)\n\n\n## ----tableBliss----------------------------------------------------\nwith(bliss, table(conc, conc.asFactor))\n\n\n## ----fittingBlissModel---------------------------------------------\nglm.insects.factor <- glm(cbind(dead, alive) ~ conc.asFactor,\n                          data = bliss,\n                          family = \"binomial\")\n\n\n## ----coefFactro----------------------------------------------------\ncoef(glm.insects.factor)\n\n\n## ----coefFactrModelExp---------------------------------------------\nexp(coef(glm.insects.factor))\n\n\n## ----fittingGLmInsexts2--------------------------------------------\nglm.insects <- glm(cbind(dead, alive) ~ conc,  \n                   family = \"binomial\",\n                   data = bliss)\nsummary(glm.insects)\n\n\n## ----quasiModels---------------------------------------------------\nquasi.glm.complaints <- glm(complaints ~ . , \n                                  data = esdcomp, \n                     family = \"quasipoisson\")\n\n\n## ----summaryQuasiModel---------------------------------------------\nsummary(quasi.glm.complaints)\n\n\n## ----fitGamGLm, message=FALSE--------------------------------------\nlibrary(mgcv)\ngam.complaints <- gam(complaints ~ sex + \n                        s(visits) + \n                        s(revenue), \n                      family = \"quasipoisson\",\n                      data = esdcomp)\n##\nsummary(gam.complaints)\n\n\n## ----purlFile, include=FALSE, eval=FALSE---------------------------\n## ## (this chunk is not included nor evaluated)\n## ##\n## knitr::purl(\"GLMs_Lab.Rmd\")\n\n\n## ----sessionINfo, size='footnotesize'------------------------------\nsessionInfo()\n\n"}