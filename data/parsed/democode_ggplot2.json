{"name": "democode_ggplot2", "extension": ".R", "course": "RB", "st_mode": 33204, "st_ino": 13091680, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 6304, "st_atime": 1759510073.730872, "st_mtime": 1759492208.0, "st_ctime": 1759510073.4414902, "st_birthtime": 1759492208.0, "st_blocks": 16, "st_blksize": 4096, "content": "###############################################\n## Visualisation using ggplot2 ##\n###############################################\n\n## Have a quick look out data set\nhead(Loblolly, n = 8)\nlevels(Loblolly$Seed)\nnlevels(Loblolly$Seed) ## Number of different seeds \ntable(Loblolly$Seed) ## Number of observations per seed \ntable(Loblolly$age) ## Number of observations per age\n\n###############################################\n\n## {ggplot2}\nlibrary(ggplot2)\n\n## base call ggplot()\n# ggplot(data, mapping = aes(x = x_var, y = y_var))\n\n# ggplot(data, mapping = aes(x = x_var, y = y_var)) + ## !\n#   geom_point()\n\n## Density plot with rugs\nggplot(data = Loblolly,\n       mapping = aes(x = height)) + \n  geom_density() ## ! \n\nggplot(data = Loblolly,\n       mapping = aes(x = height)) + \n  geom_density() +\n  geom_rug() ## !\n\n## Histogram\nggplot(data = Loblolly,\n       mapping = aes(x = height)) +\n  geom_histogram() ## !\n\n###############################################\n\n## Scatter plot\nggplot(data = Loblolly,\n       mapping = aes(x = age, y = height)) +\n  geom_point() ## !\n\n## Transparency  \nggplot(data = Loblolly,\n       mapping = aes(x = age, y = height)) +\n  geom_point(alpha = 0.2) ## ! 0.8 transparency\n\n## Jitter can be used if over-plotting is a problem.\n## Log-transform the y-axis.\nggplot(data = Loblolly,\n       mapping = aes(x = age, y = height)) +\n  geom_jitter(alpha = 0.2, width = 0.5, height = 0) + ## ! \n  scale_y_log10() ## ! \n\n###############################################\n\n## Facetting or panelling\nggplot(data = Loblolly,\n       mapping = aes(y = height, x = age)) +\n  geom_point() +\n  facet_wrap(~ Seed) ## !\n\n## Colour the points\nggplot(data = Loblolly,\n       mapping = aes(y = height, x = age,\n                     colour = Seed)) + ## !\n  geom_point()\n\n## Grouping (no colouring)\nggplot(data = Loblolly,\n       mapping = aes(y = height, x = age,\n                     group = Seed)) + ## !\n  geom_line(alpha = 0.5) ## !\n\n## Grouping (colouring)\nggplot(data = Loblolly,\n       mapping = aes(y = height, x = age, \n                     colour = Seed)) + ## !\n  geom_line() \n\n###############################################\n\n## Adding summary statistics\nggplot(data = Loblolly,\n       mapping = aes(y = height, x = age)) +\n  geom_point() +\n  geom_smooth() ## !\n\n\n## Simple linear regression\nggplot(data = Loblolly,\n       mapping = aes(y = height, x = age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") ## !\n\n\n## Facetting / panelling and summary statistics\nggplot(data = Loblolly,\n       mapping = aes(y = height, x = age, \n                     colour = Seed)) +\n  geom_point(alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = FALSE) + \n  facet_wrap(~ Seed) ## !\n\n###############################################\n\n## Defining variables in `aes()`\n## It makes a different if argument is defined with in aes() (attributes \n## different for each observation) or outside aes() (attribute is fixed). \nggplot(data = Loblolly,\n       mapping = aes(x = height, y = Seed)) + \n  geom_boxplot(mapping = aes(fill = Seed)) + ## !\n  geom_point(\n    ## Color is different for each obs.\n    # mapping = aes(color = Seed), \n    ## Same color for all points\n    color = \"red\",\n    ## Make points 0.7 transparent\n    alpha = 0.3) ## !\n\n## See R package {beeswarm} and {ggbeeswarm}\n\n###############################################\n\n## Order of layers matter. \n\n## \nggplot(data = Loblolly,\n       mapping = aes(y = height, x = age, \n                     colour = Seed)) +\n  geom_smooth(method = \"lm\", se = FALSE) + ## !\n  geom_point() ## !\n\n## \nggplot(data = Loblolly,\n       mapping = aes(y = height, x = age, \n                     colour = Seed)) +\n  geom_point() + ## !\n  geom_smooth(method = \"lm\", se = FALSE) ## !\n\n###############################################\n\n## Piping for auto-completion within the ggplot() function.\n## Loading dplyr is enough for getting most pipe operators.\n# set.seed(654)\nlibrary(magrittr) \n# library(dplyr) ## Note that {dplyr} loads as well the pipe operator %>% \ngg.tmp <- Loblolly %>% \n  ggplot(mapping = aes(x = age, y = height)) +\n  geom_jitter() \n\ngg.tmp\n\n# x %>% f(y) ## f(x, y)\n\n###############################################\n\n## Update the data set of an existing plot, e.g. a proto type plot. \n## Use %+% as a pipe operator. Note that you need the package {magrittr} for \n## the pipe operator %+% \nd.tmp <- data.frame(age = 1:20, \n                    height = 1:20)\ngg.tmp %+% \n  d.tmp +\n  xlab(\"Alter\")\n\n###############################################\n\n## Use a color palette from the color brewer\n# install.packages(\"RColorBrewer\") \nlibrary(RColorBrewer)   \nlibrary(dplyr)\n\ndisplay.brewer.all(colorblindFriendly = TRUE)     \n\nLoblolly.small <- Loblolly %>%\n  filter(Seed %in% c(301, 303, 305, 309, 311, 315))\n\n## Default colour\ngg.Loblolly <- Loblolly.small %>% \n  ggplot(mapping = aes(x = age, y = height, \n                       colour = Seed)) +\n  geom_jitter() \n\ngg.Loblolly\n\n## Different colour palette\ngg.Loblolly.final <- gg.Loblolly +\n  scale_colour_brewer(palette = \"Paired\") ## !\n\ngg.Loblolly.final\n\n###############################################\n\n## Order the legend, say, colour\nLoblolly.small %>%\n  mutate(Seed = factor(Seed, \n                       levels = c(301, 303, 305, \n                                  309, 311, 315))) %>% ## !\n  ggplot(mapping = aes(x = age, y = height, colour = Seed)) +\n  geom_jitter() +\n  scale_colour_brewer(palette = \"Paired\")\n\n###############################################\n\n## Change the theme\n## We can change the theme (and there are as well additional packages to have \n## more themes)\ngg.tmp +\n  theme_bw()\n \n###############################################\n\n## Save a plot using ggsave()\nggsave(filename = \"Loblolly_6.png\", \n       plot = gg.Loblolly.final)\n\n###############################################\n\n## Making a plot interactive\nlibrary(plotly)\n# plotly::ggplotly()\nggplotly(gg.Loblolly.final)\n \n###############################################\n\n## Have multiple plots aside of each other: see the R package {patchwork}.\n## Example on https://statisticsglobe.com/patchwork-r-package\n\n###############################################\n\n## {ggplot2} ## \n## - google them for more examples\n## - have a look in the corresponding books\n## - See the nice over-view https://r-graph-gallery.com/index.html\n\n\n\n"}