{"name": "democode_regex", "extension": ".R", "course": "RB", "st_mode": 33204, "st_ino": 13091724, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 4692, "st_atime": 1759510073.7164278, "st_mtime": 1759492210.0, "st_ctime": 1759510073.390048, "st_birthtime": 1759492210.0, "st_blocks": 16, "st_blksize": 4096, "content": "######################################\n## Democode for regular expressions ##\n######################################\n\n## Create your own string vector from where you want to find some pattern\nstring <- c(\"apple\",\n            \"dunkel\",\n            \"elephant\",\n            \"3 elephants walk on the street\", \n            \"An elephant goes on an elicopter\")\n\n## Choose the pattern that you want to find\npattern <- \"el.\" ## starts with el, and the next character can be anything \n                 ## except \\n, once.\n\n\n\n########################################\n\n## Detect the pattern in the string vector\ngrep(pattern = pattern, x = string)\n## In the third, forth and fifth position of the vector, the pattern \"el\" is present.\n\n\n#########################################\n\n\n## Locate the first match in the string vector\nregexpr(pattern = pattern, text = string)\n## In the first two elements of the vector, this pattern is not present\n## In third element, the pattern is matched at the first character and \n## is of length 3\n## For the forth element, the match starts at the third character and \n## is of length 3\n## For the last element, the first match is found to be at position 4,\n## and it is of length 3.\n\ngregexpr(pattern = pattern, text = string)\n## Renders a list, and for each entry of the vector there is a position.\n## First element: no match\n## Second element: no match\n## Third element: as before\n## Forth element: as before\n## Fifth element: it matches 2 time, at position 4 and 24, both of length 3\n\n\n\n#########################################\n\n## Extract the first match in the string vector\nregmatches(x = string, m = regexpr(pattern = pattern, text = string))\n\n## Extract all the matches in the string vector\nregmatches(x = string, m = gregexpr(pattern = pattern, text = string))\n\n\n#########################################\n\nreplacement <- \"aa\"\n\n## Replace first match in the string vector with \"aa\"\nsub(pattern = pattern, replacement = replacement, x = string)\n## Replace all matches in the string vector with \"aa\"\ngsub(pattern = pattern, replacement = replacement, x = string)\n\n\n#########################################\n\n## Split into single characters\nstrsplit(x = string, split = character(0))\n\n## Split into words\nstrsplit(x = string, split = \" \")\nstrsplit(x = string, split = \"\\\\s\")\n\n\n## Split the string vector based on \"l\"\nstrsplit(x = string, split = \"l\")\n\n\nstring2 <- c(\"an apple for my elementary school teacher\",\n             \"could you spell apple?\",\n             \"3 elephants walk on the street\", \n             \"An elephant goes on an elicopter\")\n\nstrsplit(x = string2, split = c(\"pp\", \"el\"))\n## Split the first element of the vector using \"pp\", the second using \"el\", \n## the third using \"pp\", forth using \"el\"\n\n## The split is performed each time the pattern is encountered, not only for\n## the first match.\n\n\n\n#########################################\nlibrary(stringr)\n\nstring\npattern\n##\nstr_locate(string = string, pattern = pattern)\nstr_locate_all(string = string, pattern = pattern)\n\nstr_extract(string = string, pattern = pattern)\nstr_extract_all(string = string, pattern = pattern)\n\nstr_replace(string = string, pattern = pattern, replacement = replacement)\nstr_replace_all(string = string, pattern = pattern, replacement = replacement)\n\nstr_split(string = string, pattern = pattern)\n\nstr_split(string = string2, pattern = \"\")\nstr_split(string = string2, pattern = c(\"el\"))\n\n\n\n############### More examples ###############\n\nv.char <- c(\"Anna\", \"Anna \", \"Johnny Cashout\", \"12 Luc @\")\n\n## Number of characters\nnchar(v.char)\n\n## Get first three characters\nsubstr(v.char, start = 1, stop = 3)\n\n## Contains \"c\" \ngrepl(v.char, pattern = \"c\")\n\n## Contains \"c\" (which element?)\ngrep(v.char, pattern = \"c\")\n\n## Contains \"c\" or \"C\"\ngrepl(v.char, pattern = \"c\", ignore.case = TRUE)\ngrep(v.char, pattern = \"c\", ignore.case = TRUE)\n\n## Starts with \"A\"\ngrep(v.char, pattern = \"^A\")\n\n## Ends with \"out\"\ngrep(v.char, pattern = \"out$\")\n\n## Starts with a letter (any letter, any case)\ngrep(v.char, pattern = \"^[A-z]\")\n\n## Starts with a number\ngrep(v.char, pattern = \"^[0-9]\")\n\n## Substitute some text\ngsub(v.char, pattern = \"Anna\", replacement = \"Annamaria\")\n\n\n## Replacements\nv.char.2 <- c(\"agagamemem 12 Euro\",\n              \"A 13 CHF\",\n              \"ZZ 24 ?\")\ngsub(v.char.2, pattern = \"\\\\s\", replacement = \"--\")\n## Gets the empty space and replaces it with \"--\"\n\n## Extract a group\ngsub(v.char.2, pattern = \"([A-z]+\\\\s)([0-9]+)(.+)\", \n     replacement = \"\\\\2\")\n## Finds 3 groups \n## 1. any letters one or several times ended by an empty space\n## 2. any number one or several times\n## 3. anything (except \\n) one or several times\n## replace all with the second group \n\n\n\n"}