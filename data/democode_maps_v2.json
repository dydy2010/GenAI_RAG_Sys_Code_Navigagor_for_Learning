{"name": "democode_maps_v2", "extension": ".R", "course": "RB", "st_mode": 33204, "st_ino": 13091710, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 7086, "st_atime": 1759510075.4528122, "st_mtime": 1759492210.0, "st_ctime": 1759510073.514409, "st_birthtime": 1759492210.0, "st_blocks": 16, "st_blksize": 4096, "content": "#### DEMOCODE for maps ####\n\n## Load packages\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(sf)          ## for function st_transform() (geo data fromat)\nlibrary(osmdata)\nlibrary(maptiles)    ## for get_tiles() (background map)\nlibrary(tidyterra)   ## for geom_spatraster_rgb() (adding the map to the plot)\n\n################################################################################\n## Add information from open street maps  ##\n\n## osmdata::available_features() is a function that returns all possible keys\navailable_features()\n\n## osmdata::available_tags() is a function that returns all possible \"values\"\n## for a given \"key\".\navailable_tags(\"emergency\") \n\n## Retrieve the coordinates of a municipality / region / nation \n## and some additional information which is not of interested \nopq(\"lugano\") ## getbb() is an alternative\n\n## We get coordinates of the defibrillators in Lugano. The coordinates are \n## are contained in the element \"osm_points\".\ndefib <- opq(\"lugano\") %>% \n  ## Add \"features\" specified below for coordinates given in opq(\"lugano\")\n  add_osm_feature(key = \"emergency\", \n                  value = c(\"defibrillator\")) %>% \n  ## Transforms the OSM Overpass query (osmdata object) to sf format\n  osmdata_sf() \n\n\ncolnames(defib$osm_points)\n## We are only interested in the element geometry, which contains the \n## information needed to plot the points\ndefib$osm_points$geometry\n\n\n## Store the information in some object that we need for plotting the points on \n## the map\ndefib.geometry <- defib$osm_points$geometry\n\n## Plot the defibrillators in Lugano, first without the background map\nggplot() + \n  geom_sf(data = defib.geometry) + \n  theme_minimal()\n\n\n## Now we add the background map of Lugano\n\n## Get tiles (for background map) that contain all the defibrillators in Lugano\nbackground.defib <- get_tiles(defib.geometry)\nbbox.limits <- st_bbox(defib.geometry)\nbbox.lim.lugano <- getbb(\"lugano\")\n\nggplot() +\n  ## Add tiles / background map\n  geom_spatraster_rgb(data = background.defib, \n                      maxcell = 5e6) +\n  ## Add points using geom_sf\n  geom_sf(data = defib.geometry) +\n  ## Set limits of coordinate system\n  coord_sf(xlim = bbox.limits[c(1, 3)], \n           ylim = bbox.limits[c(2, 4)], \n           expand = FALSE)\n\n## Set different limits\nggplot() +\n  ## Add tiles / background map\n  geom_spatraster_rgb(data = background.defib, \n                      maxcell = 5e6) +\n  ## Add points\n  geom_sf(data = defib.geometry) +\n  ## Set limits of coordinate system\n  coord_sf(xlim = bbox.lim.lugano[1, ], \n           ylim = bbox.lim.lugano[2, ], \n           expand = FALSE)\n\n\n################################################################################\n## Add boarders ##\n\n## This object contains the boarders or shapes in the element \"multipolygons\". \nboarders <- opq(\"luzern\") %>% \n  add_osm_feature(key = \"boundary\", \n                  value = c(\"administrative\")) %>% \n  osmdata_sf() \n\n\ncolnames(boarders$osm_multipolygons)\n## We are only interested in admin_level and name\nboarders$osm_multipolygons[, c(\"admin_level\", \"name\")]\n\n## Admin levels\n## 2 are countries\n## 4 are cantons and regions in Italy\n## 6 are districts\n## 7 are \"circolo\" / de:Bezrike\n## 8 are municipalities\n## 10 are former municipalities \n\n## Store the information in a new object that we need for plotting the map\nboarders.multipolygons <- boarders$osm_multipolygons\n\n## We are only interested in municipality boarders and filter for the admin \n## level\nboarders.municipalities <- \n  boarders.multipolygons[boarders.multipolygons$admin_level == 8, ]\n\n## We add the boarders using geom_sf\nggplot() + \n  geom_sf(data = boarders.municipalities,\n          colour = \"red\", linewidth = 1) + \n  theme_minimal()\n\n\n################################################################################\n## Add boarders to actual maps ##\n\n## We add the boarders and the background maps. Note that we get all the \n## boarders that intersect with our bounding box / bbox \n\n## Get tiles for background map\ntiles.boarders.municipalities <- get_tiles(boarders.municipalities, \n                                           provider = \"OpenStreetMap\", \n                                           zoom = 13 ## see help page\n                                           )\n\n## Get limits\nbbox.limits <- st_bbox(boarders.municipalities)\n\nggplot() +\n  ## Add tiles / background map\n  geom_spatraster_rgb(data = tiles.boarders.municipalities, \n                      maxcell = 5e6) +\n  ## Add boarders using geom_sf\n  geom_sf(data = boarders.municipalities,\n          colour = \"red\", linewidth = 1, fill = NA) +\n  ## Set limits of coordinate system\n  coord_sf(xlim = bbox.limits[c(1, 3)], \n           ylim = bbox.limits[c(2, 4)], \n           expand = FALSE)\n\n\n################################################################################\n## Use shape files / .shp file ##\n\n## Load files with map information\n## You need all four files with the same name but different ending in the \n## folder, altough only one seams to be loaded / read below. \n## The shape files are on Ilias but can as well be downloaded on\n## https://www.swisstopo.admin.ch/en/landscape-model-swissboundaries3d\nswiss_cantons <- st_read(\"files_maps_CH/G1K09.shp\") \n\n## Plot the Swiss cantons\nggplot() +\n  geom_sf(data = swiss_cantons, fill = NA) + \n  theme_bw()\n\n\n\n\n## We fill the shapes with a constant color.\nggplot() +\n  geom_sf(data = swiss_cantons, fill = \"red\") +\n  theme_bw()\n\n## We change the color according to some additional information. \n## Example data is created which is used for coloring. \nset.seed(1)\nswiss_cantons2 <- cbind(fill.cat = sample(c(\"AB\", \"CD\", \"EF\"), size = 26, \n                                         replace = TRUE), \n                       fill.num = rnorm(26),\n                       swiss_cantons)\n\n## 1. Fill according to numeric values\nggplot() +\n  geom_sf(data = swiss_cantons2, \n          mapping = aes(fill = fill.num)) +\n  theme_bw() \n\n## 2. Fill according to categories\nggplot() +\n  geom_sf(data = swiss_cantons2, \n          mapping = aes(fill = fill.cat)) +\n  theme_bw()\n\n## Order of colors \nswiss_cantons\nswiss_cantons3 <- swiss_cantons[order(swiss_cantons$KURZ), ]\ncol.tmp <- c(\"BLABLA\", NA, NA, \"BLA2\", rep(NA, 22))\ncbind(swiss_cantons3$KURZ, col.tmp)\n\n## For simplicity, we just add the colors using cbind() \n## Alternative: consider using a join to add the colors, which is more elegant. \nswiss_cantons3 <- cbind(col.tmp, swiss_cantons3)\n\nggplot() +\n  geom_sf(data = swiss_cantons3, \n          mapping = aes(fill = col.tmp)) +\n  theme_bw()\n\n\n## Coordinates of some stations in Ticino. Note that we use the Swiss \n## coordinate system because this is as well the coordinate system of the \n## given shape files.\nd.stations <- data.frame(LV03_E = c(722190, 703400), \n                         LV03_N = c(78770, 112530))\n\n## Plot Ticino with these stations\nggplot() +\n  geom_sf(data = swiss_cantons[swiss_cantons$KURZ == \"TI\", ], fill = NA) +\n  geom_point(data = d.stations, mapping = aes(x = LV03_E, y = LV03_N), \n             colour = \"red\", size = 2, alpha = 0.3) + \n  theme_bw()\n\n"}