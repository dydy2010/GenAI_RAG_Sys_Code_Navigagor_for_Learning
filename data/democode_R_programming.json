{"name": "democode_R_programming", "extension": ".R", "course": "RB", "st_mode": 33204, "st_ino": 13091688, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 3783, "st_atime": 1759510075.4064274, "st_mtime": 1759492208.0, "st_ctime": 1759510073.5037663, "st_birthtime": 1759492208.0, "st_blocks": 8, "st_blksize": 4096, "content": "###############################\n###############################\n## Writing your own function ##\n\n## Pseudo-code\n# function.name <- function( arguments ){ body of the function }\n\n## Several arguments (with and without defaults)\nmy.plot <- function(N = 100, my.col = \"blue\"){\n  sim.data <- runif(n = N)\n  x <- 1:N\n  plot(sim.data ~ x, col = my.col)\n}\n\nmy.plot(N = 20, my.col = \"green\")\nmy.plot(my.col = \"red\")\nmy.plot()\n\n\nmy.plot(my.col = \"green\", main = \"Some sim data\")\n\n## The \"...\" argument\nmy.plot_2 <- function(N = 100, my.col = \"blue\", ...){\n  sim.data <- runif(n = N)\n  x <- 1:N\n  plot(sim.data ~ x, col = my.col, ...)\n}\n\nmy.plot_2(my.col = \"green\", main = \"Some simulated data\")\nmy.plot_2(my.col = \"green\")\n\n###############################\n###############################\n## for-loops ##\nlibrary(stringr)\n\nmy.vec <- c(\"home\", \"an apple for my elementary teacher\", \"helicopter\")\n\n## You really need to print the object to see the output\n## inside a for loop\nfor (element in my.vec) {\n  print(paste0(\"The element is: \", element))\n  str_extract(element, pattern = \"el.\")\n}\n\n\nfor (element in my.vec) {\n  print(paste0(\"The element is: \", element))\n  tmp <- str_extract(element, pattern = \"el.\")\n  print(paste0(\"The match is: \", tmp))\n}\n\n\n\n###############################\n###############################\n## apply ##\n\n## Create a matrix with random numbers from 0 to 1\nm.runif <- matrix(runif(8), nrow = 2, ncol = 4)\nm.runif\n\n## sum all elements by row\napply(m.runif, MARGIN = 1, sum)\n\n## sum all elements by column\napply(m.runif, MARGIN = 2, sum)\n\n## Divide each element of the matrix by 2\n## MARGIN = c(1, 2) is used to iterate through every element of the matrix\napply(matrix(1:9, ncol = 3), MARGIN = c(1, 2), FUN = function(x){x / 2})\n\n\n\n###############################\n###############################\n## if - else statement ##\nset.seed(2024)\na <- runif(1)\na\n\nif (a < 0.5) {\n  \n  print(paste(a, \"is smaller than 0.5\"))\n  \n} else if ( a > 0.5) {\n  \n  print(paste(a, \"is greater than 0.5\"))\n  \n} else {\n  \n  print(a, \"is equal to 0.5\")\n  \n}\n\n\n## Going further ## \n\n# Use if-else inside a function\nmy.generator <- function(){\n  \n  a <- runif(1) \n  print(paste(\"The generated value is\", a))\n  \n  if (a < 0.5) {\n    \n    print(\"which is smaller than 0.5\")\n    \n  } else if ( a > 0.5) {\n    \n    print(\"which is greater than 0.5\")\n  } else {\n    \n    print(\"which is equal to 0.5\")\n  }\n}\n\nmy.generator()\n\n\n## Put the function in a for-loop\nfor (i in 1:10) {\n  my.generator()\n}\n\n###############################\n###############################\n## Further example\n\nlibrary(ggplot2)\n\n## Function with all the things we learned today\nmy.dist <- function(dist, nsim = 1000,\n                    lambda = 1,\n                    size = 100,\n                    prob = 0.5,\n                    min = 0,\n                    max = 1){\n\n  possible.distr <- c(\"poisson\", \"uniform\", \"binomial\")\n\n  if (dist == \"poisson\") {\n\n    my.vec <- rpois(n = nsim, lambda = lambda)\n\n  } else if (dist == \"uniform\") {\n\n    my.vec <- runif(n = nsim, min = min, max = max)\n\n  } else if (dist == \"binomial\") {\n\n    my.vec <- rbinom(n = nsim, size = size, prob = prob)\n\n  } else {\n\n    print(paste(\"Please choose one of the following distributions: \",\n                paste(possible.distr, collapse = \", \" )))\n  }\n\n  d.my.vec <- as.data.frame(my.vec)\n\n  ggplot(d.my.vec, mapping = aes(x = my.vec)) +\n    geom_density()\n\n}\n\n\n\nmy.dist\nmy.dist()\nmy.dist(\"poisson\")\nmy.dist(\"poisson\", lambda = 0.4)\n\nmy.dist(\"binomial\")\nmy.dist(\"binomial\", size = 20)\nmy.dist(\"binomial\", size = 20, prob = 0.2)\n\nmy.dist(\"uniform\")\nmy.dist(\"uniform\", min = -10, max = 100)\n\nmy.dist(\"Binomial\")\n\n#----------------------------------------------\n\na <- c(\"binomial\", \"poisson\", \"uniform\")\napply(as.data.frame(a), MARGIN = 1, my.dist)\n\n\n\n\n\n\n\n\n"}