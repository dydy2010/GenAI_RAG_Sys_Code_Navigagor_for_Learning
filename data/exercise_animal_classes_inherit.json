{"name": "exercise_animal_classes_inherit", "extension": ".py", "course": "PDS", "st_mode": 33204, "st_ino": 13100551, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 2437, "st_atime": 1759510078.96242, "st_mtime": 1759494084.0, "st_ctime": 1759510077.7227378, "st_birthtime": 1759494084.0, "st_blocks": 8, "st_blksize": 4096, "content": "'''\nExercise Animals Inheritance:\nUse the file animals.csv to read information about animals.\n\nPart a)\nProduce a class structure where Dog, Cat and Snake are implemented as child classes of a base class Animal. Create the object variables in the base class, along with a method 'print_basic_information', which prints 'type' and 'name' to the console.\nIn each child class, use the base class constructor with 'super' and add an additional method 'speak', specific to that child class.\nIn each child class, add an additional method where you return the sum of the object variables 'age' and 'legs'.\n\nFor each element in the animals.csv, create an object of the corresponding subclass, let it print basic information (method from 'Animal'), let it speak (method from child class) and get the sum of 'age' and 'legs' as a return value.\n\nPart b)\nOften, there are many different solutions how one can solve a particular task. Ideas like code readability and avoiding code duplication become more important in more complex applications. Do you find a way to reduce code duplication in the structure of part a)?\n\nPart c)\nOverride the 'print_basic_information' method in the child class Dog by using the class name as a parameter instead of self.animal_type. You can access the name of the class by self.__class__.__name__\n'''\n\n#%%  Base Class\n\n\nclass ...FILL HERE...:\n\n    def __init__(self, animal_type, name, age, weight, legs):\n        self.animal_type = animal_type\n        self.name = name\n        self.age = age\n        self.weight = weight\n        self.legs = legs\n\n    ...FILL HERE...\n\n\n#%%  Child Classes\n\nclass Dog(...FILL HERE...):\n\n\n    def __init__(self, animal_type, name, age, weight, legs):\n        ...FILL HERE...\n\n    ...FILL HERE...\n\nclass Cat():\n\n    ...FILL HERE...\n\nclass Snake():\n\n    ...FILL HERE...\n\n\n#%% solution with file loop\nobj_list = []\nwith open('./animals.csv') as f:\n    for line in f.readlines()[1:]:\n        animal_type = line.split(\", \")[0]\n        name = line.split(\", \")[1]\n        age = int(line.split(\", \")[2])\n        weight = int(line.split(\", \")[3])\n        legs = int(line.split(\", \")[4])\n        # create objects based on animal_type\n        if ...FILL HERE...:\n        ...FILL HERE...\n        # add objects to obj_list\n        obj_list.append(obj)\n\nfor elem in obj_list:\n    print(\"--\\n\")\n    elem.print_basic_information()\n    elem.speak()\n    c_sum = elem.sum_of_age_and_legs()\n    print(c_sum)\n"}