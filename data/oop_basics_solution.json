{"name": "oop_basics_solution", "extension": ".py", "course": "PDS", "st_mode": 33204, "st_ino": 13100599, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 1983, "st_atime": 1759510075.4443188, "st_mtime": 1759494116.0, "st_ctime": 1759510073.5232053, "st_birthtime": 1759494116.0, "st_blocks": 8, "st_blksize": 4096, "content": "\"\"\"\nTASK1:\nDefine a class 'Building' with the following specifications:\n\nclass variables\n_counter:\n_id_container:\n\nobject variables\n_building_id:\n_number_of_floors:\n\nobject methods\n_get_new_id:\nget_number_of_floors:\n\n\nTASK2:\nEach building must have it's unique building id. In each object creation process, update first the class variable _counter by adding 1 to its current value (start with 0). Use the object method '_get_new_id' to use the updated _counter variable as the building_id.\n...\nself._building_id = self._get_new_id()\n...\nIn the _get_new_id method add the building_id to the _id_container class variable. (HINT: Later you can use that to throw an error in case the building_id has already been taken)\n\n\nTASK3:\nDefine a class 'OfficeBuilding' as a subclass of 'Building'. Add an additional object variable '_number_of_working_places', use super to handle '_nr_of_floors'.\n\n\nTASK4:\nCreate one Building and one OfficeBuilding object with different floor numbers and print each id with the corresponding number of floors to the console.\n\n\nTASK5 (optional):\nWhat happens to the building ids if you rerun your programm? How could you guarantee that uniqueness is maintained across multiple executions of your script?\n\"\"\"\n\n\nclass Building():\n\n    _counter = 0\n    _id_container = []\n\n    def __init__(self, nr_of_floors):\n        Building._counter += 1\n        self._building_id = self._get_new_id()\n        self._number_of_floors = nr_of_floors\n\n    def _get_new_id(self):\n        Building._id_container.append(Building._counter)\n        return Building._counter\n\n    def get_number_of_floors(self):\n        return self._number_of_floors\n\n\nclass OfficeBuilding(Building):\n\n    def __init__(self, nr_of_floors, nr_of_working_places):\n        super().__init__(nr_of_floors)\n        self._nr_of_working_places = nr_of_working_places\n\n\nB = Building(3)\nOB = OfficeBuilding(8,150)\n\nprint(B._building_id, B.get_number_of_floors())\nprint(OB._building_id, OB.get_number_of_floors())\n"}