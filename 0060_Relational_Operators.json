{"name": "0060_Relational_Operators", "extension": ".ipynb", "course": "PDS", "st_mode": 33204, "st_ino": 13100463, "st_dev": 16777233, "st_nlink": 1, "st_uid": 501, "st_gid": 20, "st_size": 5053, "st_atime": 1759497181.2841563, "st_mtime": 1759494036.0, "st_ctime": 1759510073.22182, "st_birthtime": 1759494036.0, "st_blocks": 16, "st_blksize": 4096, "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"Ideas from this source: https://www.udemy.com/course/the-complete-python-masterclass/learn/lecture/11121312#overview/ revised and rearranged: `mae`\\n\",\n    \"\\n\",\n    \"### Relational operators\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"To better understand the conditions in the if-else structures, let's look at **comparison operations**. This will help us to formulate a variety of conditions.\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"### Inequality Operators and Bools  \"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"if 6 < 5:\\n\",\n    \"    print(\\\"Yes\\\")\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"Why is there no output with print()? <br> Let's look at expressions with inequality signs (<,>) in detail:\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"print(6 < 5)  \\n\",\n    \"print(5 < 6)\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"**True** and **False** are other _fixed expressions_ in Python. In addition to strings (character strings), integers and floats, they form another data type - the **Bool**.\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"b = False\\n\",\n    \"print(b)\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"An if condition is therefore only executed more if a Boolean with the value True follows the if: \"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"result = 5 < 6\\n\",\n    \"if result:\\n\",\n    \"    print(\\\"5 is lower than 6\\\")\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"print(5 < 6)\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"### The equality operator\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"Besides inequalities, we can of course also query equality with **===**\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"print(5 == 5)\\n\",\n    \"print(5 == 4)\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"if 5 == 5:\\n\",\n    \"    print(\\\"5 is 5\\\")\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"Using the equality operator we can also query the _greater equal_ (**>=**) and _less equal_ (**<=**) states:\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"print(5 < 5)\\n\",\n    \"print(5 <= 5)\\n\",\n    \"print(5 >= 5)\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"### Comparing Strings\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"We can not only compare numbers, but also strings:\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"word = \\\"Hello\\\"\\n\",\n    \"print(word == \\\"Hello\\\")\\n\",\n    \"print(word == \\\"World\\\")\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"### The Inequality Operator\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"We check for inequality with the character **!=**\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"word = \\\"Hello\\\"\\n\",\n    \"print(word != \\\"Hello\\\")\\n\",\n    \"print(word != \\\"World\\\")\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"Numbers can also be compared in terms of inequality:\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [\n    \"zahl = 4\\n\",\n    \"print(zahl != 4)\\n\",\n    \"print(zahl != 5.5)\"\n   ],\n   \"outputs\": [],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"### Why don't you play around with what you've learned a little bit?\\n\",\n    \"- Formulate your own comparison operations with the operators from this lesson! :-)\"\n   ],\n   \"metadata\": {}\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"source\": [],\n   \"outputs\": [],\n   \"metadata\": {}\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"}